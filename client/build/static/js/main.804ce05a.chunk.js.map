{"version":3,"sources":["SummaryPage.js","Entry.js","Date.js","AddPage.js","GridCell.js","GridRow.js","HistoryPage.js","MonthStatement.js","AnnualStatement.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["SummaryPage","this","props","currentAnnualStatement","getMonthTotalIncome","currentMonth","toFixed","getMonthTotalExpense","totalIncome","totalExpense","getMonthStatement","getCategoriesIncomeExpenseTotal","map","entry","className","category","income","expense","renderCategoryTotals","getAnnualTotalIncome","getAnnualTotalExpense","React","Component","Entry","id","date","location","description","Date","year","month","day","AddPage","onAddEntry","dateParts","state","inputDate","split","console","log","idCount","inputIncome","inputExpense","inputCategory","inputLocation","inputDescription","setState","onAddCategory","inputNewCategory","length","today","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","field","evt","val","target","value","inputMode","onChange","updateInput","onClick","GridCell","isDate","cellId","GridRow","columnRow","i","key","newCellId","isHeaderRow","renderCells","rowContent","rowId","HistoryPage","onChangeViewYear","e","onChangeViewMonth","annualStatement","categories","months","dates","push","headerRowContent","forEach","categoryName","newRowId","entries","getMonthEntries","renderEntry","options","op","availableMonths","selectedMonth","getCurrentYear","renderSelectOption","availableYears","getCurrentMonth","data-simplebar","data-simplebar-auto-hide","renderGrid","MonthStatement","monthlyEntires","statement","calculateTotal","totals","added","t","AnnualStatement","monthlyStatements","initEmptyMonthStatement","copy","statements","Array","addEntry","includes","Dashboard","CLIENT_ID","ClickCount","saveIntervalId","setInterval","saveToDrive","handleNewEntry","getCurrentAnnualStatement","newCurrentAnnualStatement","annualStatementIndex","currentYearIndex","yearDNE","allAnnualStatements","addNewAnnualStatementWithEntry","newAllAnnualStatements","addCategory","addEntryToMonthStatement","incrementClickCount","handleNewCategory","c","setCurrentAnnualStatement","handleChangeViewYear","firstAvailableMonth","monthStatement","isStatementEmpty","handleChangeViewMonth","successLoginGoogle","response","userEmail","profileObj","email","userName","name","isSignedIn","fetch","method","headers","accessToken","tokenObj","access_token","then","res","json","data","message","getDataFromDrive","failureLoginGoogle","successLogoutGoogle","isSaving","body","JSON","stringify","status","userData","newStatement","newAllAnnualStatement","newAnnualStatement","newCurrentYearIndex","years","clientId","buttonText","onLogoutSuccess","render","renderProps","disabled","onSuccess","onFailure","cookiePolicy","scope","getAvailableYears","getAvailableMonths","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0XAqFeA,G,gLAhFX,WACI,OAA0C,OAAtCC,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBC,oBAAoBH,KAAKC,MAAMG,cAAcC,QAAQ,GAE3F,I,kCAGX,WACI,OAA0C,OAAtCL,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBI,qBAAqBN,KAAKC,MAAMG,cAAcC,QAAQ,GAE5F,I,kCAGX,WACI,OAA0C,OAAtCL,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBK,YAAYF,QAAQ,GAE1D,I,mCAGX,WACI,OAA0C,OAAtCL,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBM,aAAaH,QAAQ,GAE3D,I,kCAGX,WACI,GAA0C,OAAtCL,KAAKC,MAAMC,uBAGX,OAFuBF,KAAKC,MAAMC,uBAAuBO,kBAAkBT,KAAKC,MAAMG,cAC/CM,kCAChBC,KAAI,SAACC,GACxB,OAAO,yBAAKC,UAAU,uCACbD,EAAME,SADR,IAEC,0BAAMD,UAAU,oBAAhB,UAFD,KAEqDD,EAAMG,OAC1D,0BAAMF,UAAU,qBAAhB,UAHD,KAGsDD,EAAMI,c,oBAM/E,WACI,OACI,yBAAKH,UAAU,oBACX,yBAAKA,UAAU,0DAAf,WACA,6BACI,yBAAKA,UAAU,4BAAf,cACA,yBAAKA,UAAU,oCACX,yBAAKA,UAAU,mCACX,0BAAMA,UAAU,oBAAhB,UADJ,IAEMb,KAAKG,uBAEX,yBAAKU,UAAU,mCACX,0BAAMA,UAAU,qBAAhB,UADJ,IAEMb,KAAKM,0BAInB,6BACaN,KAAKiB,wBAElB,6BACI,yBAAKJ,UAAU,4BAAf,aACA,yBAAKA,UAAU,oCACX,yBAAKA,UAAU,mCACX,0BAAMA,UAAU,oBAAhB,UADJ,IAEMb,KAAKkB,wBAEX,yBAAKL,UAAU,mCACX,0BAAMA,UAAU,qBAAhB,UADJ,IAEMb,KAAKmB,gC,GAzETC,IAAMC,YCSjBC,G,2BAXX,WAAYC,EAAIC,EAAMT,EAAQC,EAASF,EAAUW,EAAUC,GAAc,oBACrE1B,KAAKuB,GAAKA,EACVvB,KAAKwB,KAAOA,EACZxB,KAAKe,OAASA,EACdf,KAAKgB,QAAUA,EACfhB,KAAKc,SAAWA,EAChBd,KAAKyB,SAAWA,EAChBzB,KAAK0B,YAAcA,MCIZC,E,WAXX,WAAYC,EAAMC,EAAOC,GAAM,oBAC3B9B,KAAK4B,KAAOA,EACZ5B,KAAK6B,OAASA,EACd7B,KAAK8B,KAAOA,E,yCAGhB,SAAMN,GACF,OAAOxB,KAAK4B,OAASJ,EAAKI,MAAQ5B,KAAK6B,QAAUL,EAAKK,OAAS7B,KAAK8B,MAAQN,EAAKM,Q,KCkI1EC,E,kDAnIX,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IAoBV+B,WAAa,WACT,IAAIC,EAAY,EAAKC,MAAMC,UAAUC,MAAM,KAC3CC,QAAQC,IAAIL,GACZ,EAAKhC,MAAM+B,WAAW,IAAIV,EACtB,EAAKY,MAAMK,QACX,IAAIZ,EAAKM,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAC/C,EAAKC,MAAMM,YACX,EAAKN,MAAMO,aACX,EAAKP,MAAMQ,cACX,EAAKR,MAAMS,cACX,EAAKT,MAAMU,mBACf,EAAKC,SAAS,CAACN,QAAS,EAAKL,MAAMK,QAAU,IAC7CF,QAAQC,IAAI,EAAKJ,MAAMM,cAjCR,EAoCnBM,cAAgB,WACR,EAAKZ,MAAMa,iBAAiBC,OAAS,GACrC,EAAK/C,MAAM6C,cAAc,EAAKZ,MAAMa,mBApCxC,EAAKb,MAAQ,CACTK,QAAS,EACTJ,UAAW,WACXO,cAAe,MACfC,cAAe,OACfH,YAAa,MACbC,aAAc,MACdG,iBAAkB,YAClBG,iBAAkB,IAVP,E,2CAcnB,WACI,IAAIE,EAAQ,IAAItB,EAGhB,OAFWsB,EAAMC,cAAc,KAAKD,EAAME,WAAW,GAAG,IAAIF,EAAMG,UAEpD,KADHH,EAAMI,WAAa,IAAMJ,EAAMK,aAAe,IAAML,EAAMM,gB,yBAyBzE,SAAYC,EAAOC,GACf,IAAMC,EAAMD,EAAIE,OAAOC,MACT,IAAVJ,EACAxD,KAAK6C,SAAS,CAACV,UAAWuB,IACX,IAAVF,EACLxD,KAAK6C,SAAS,CAACH,cAAegB,IACf,IAAVF,EACLxD,KAAK6C,SAAS,CAACF,cAAee,IACf,IAAVF,EACLxD,KAAK6C,SAAS,CAACL,YAAakB,IACb,IAAVF,EACLxD,KAAK6C,SAAS,CAACJ,aAAciB,IACd,IAAVF,EACLxD,KAAK6C,SAAS,CAACD,iBAAkBc,IAClB,IAAVF,GACLxD,KAAK6C,SAAS,CAACE,iBAAkBW,M,oBAGzC,WAAU,IAAD,OACL,OACI,yBAAK7C,UAAU,gBACX,yBAAKA,UAAU,wBAAf,aAGA,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBAAf,QACA,2BAAOA,UAAU,sBAAsBgD,UAAU,OAC7CD,MAAO5D,KAAKkC,MAAMC,UAClB2B,SAAU,SAAAL,GAAG,OAAI,EAAKM,YAAY,EAAGN,OAE7C,yBAAK5C,UAAU,uBACX,yBAAKA,UAAU,uBAAf,YACA,2BAAOA,UAAU,sBAAsBgD,UAAU,OAC7CD,MAAO5D,KAAKkC,MAAMQ,cAClBoB,SAAU,SAAAL,GAAG,OAAI,EAAKM,YAAY,EAAGN,OAE7C,yBAAK5C,UAAU,uBACX,yBAAKA,UAAU,uBAAf,YACA,2BAAOA,UAAU,sBAAsBgD,UAAU,OAC7CD,MAAO5D,KAAKkC,MAAMS,cAClBmB,SAAU,SAAAL,GAAG,OAAI,EAAKM,YAAY,EAAGN,OAE7C,yBAAK5C,UAAU,uBACX,yBAAKA,UAAU,uBAAf,UACA,2BAAOA,UAAU,sBAAsBgD,UAAU,UAC7CD,MAAO5D,KAAKkC,MAAMM,YAClBsB,SAAU,SAAAL,GAAG,OAAI,EAAKM,YAAY,EAAGN,OAE7C,yBAAK5C,UAAU,uBACX,yBAAKA,UAAU,uBAAf,WACA,2BAAOA,UAAU,sBAAsBgD,UAAU,UAC7CD,MAAO5D,KAAKkC,MAAMO,aAClBqB,SAAU,SAAAL,GAAG,OAAI,EAAKM,YAAY,EAAGN,OAE7C,yBAAK5C,UAAU,uBACX,yBAAKA,UAAU,uBAAf,eACA,2BAAOA,UAAU,sBAAsBgD,UAAU,OAC7CD,MAAO5D,KAAKkC,MAAMU,iBAClBkB,SAAU,SAAAL,GAAG,OAAI,EAAKM,YAAY,EAAGN,OAE7C,6BACA,yBAAK5C,UAAU,uBACX,4BAAQA,UAAU,mBAAmBmD,QAAS,kBAAM,EAAKhC,eAAzD,OACA,4BAAQnB,UAAU,oBAAlB,WAGR,6BACA,yBAAKA,UAAU,wBAAf,gBAGA,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBAAf,YACA,2BAAOA,UAAU,sBAAsBgD,UAAU,OAC7CD,MAAO5D,KAAKkC,MAAMa,iBAClBe,SAAU,SAAAL,GAAG,OAAI,EAAKM,YAAY,EAAGN,OAE7C,6BACA,yBAAK5C,UAAU,uBACX,4BAAQA,UAAU,mBAAmBmD,QAAS,kBAAM,EAAKlB,kBAAzD,OACA,4BAAQjC,UAAU,oBAAlB,gB,GA7HFO,IAAMC,WCHtB4C,G,+KAQF,WACI,OACI,yBAAKpD,UAAYb,KAAKC,MAAMiE,OAAS,2BAA6B,aAC7DlE,KAAKC,MAAM2D,U,wBARxB,WAEI,OADA5D,KAAKmE,SACEnE,KAAKmE,W,GALG/C,IAAMC,YAAvB4C,EAEKE,OAAS,EAeLF,QCfTG,G,wKAQF,SAAYC,GACR,OAAOA,EAAU1D,KAAI,SAAC+C,EAAKY,GACvB,OAAY,OAARZ,EACO,kBAAC,EAAD,CAAUa,IAAKN,EAASO,YAAe,QAAUZ,MAAO,KAAMM,QAAQ,IAEnE,IAANI,EACO,kBAAC,EAAD,CAAUC,IAAKN,EAASO,YAAc,QAAUZ,MAAOF,EAAKQ,QAAQ,IAEpE,kBAAC,EAAD,CAAUK,IAAKN,EAASO,YAAc,QAAUZ,MAAOF,EAAKQ,QAAQ,S,oBAM3F,WACI,OACI,yBAAKrD,UAAWb,KAAKC,MAAMwE,YAAc,2BAA4B,YAChEzE,KAAK0E,YAAY1E,KAAKC,MAAM0E,gB,uBAtBzC,WAEI,OADA3E,KAAK4E,QACE5E,KAAK4E,U,GALExD,IAAMC,YAAtB+C,EAEKQ,MAAQ,EA6BJR,QCiGAS,E,4MA5DXC,iBAAmB,SAACC,GAChB,IAAMnD,EAAOmD,EAAEpB,OAAOC,MACtB,EAAK3D,MAAM6E,iBAAiBlD,I,EAGhCoD,kBAAmB,SAACD,GAChB,IAAMlD,EAAQkD,EAAEpB,OAAOC,MACvBvB,QAAQC,IAAI,YAAcT,GAC1B,EAAK5B,MAAM+E,kBAAkBnD,I,gDAxEjC,SAAWoD,GAAkB,IAAD,OACxB,GAAwB,OAApBA,EAAJ,CAMA,IAHA,IAAMC,EAAaD,EAAgBC,WAC/BC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvFC,EAAQ,CAAC,CAAC,UACLd,EAAI,EAAGA,EAAI,GAAIA,IACpBc,EAAMC,KAAK,CAACF,EAAOnF,KAAKC,MAAMG,aAAe,GAAK,KAAOkE,EAAI,GAAK,KAAOtE,KAAKC,MAAMC,uBAAuB0B,OAG/G,OAAOwD,EAAMzE,KAAI,SAACa,EAAM8C,GACpB,GAAgB,UAAZ9C,EAAK,GAAgB,CACrB,IAAI8D,EAAmB,CAAC9D,GAIxB,OAHA0D,EAAWK,SAAQ,SAAAC,GACfF,EAAiBD,KAAK,CAACG,OAEpB,kBAAC,EAAD,CAASjB,IAAKH,EAAQqB,WAAa,OAAQd,WAAYW,EAAkBb,aAAa,IAE7F,IAAIiB,EAAU,EAAKzF,MAAMC,uBAAuByF,gBAAgB,EAAK1F,MAAMG,cACvEuE,EAAa,CAACnD,GASlB,OARA0D,EAAWK,SAAQ,SAAAC,GACfb,EAAWU,KAAK,IAChBK,EAAQH,SAAQ,SAAA3E,GACRA,EAAME,WAAa0E,GAAgB5E,EAAMY,KAAKM,OAASwC,GACvDK,EAAWA,EAAW3B,OAAS,GAAGqC,KAAK,EAAKO,YAAYhF,UAI7D,kBAAC,EAAD,CAAS2D,IAAKH,EAAQqB,WAAa,OAAQd,WAAYA,EAAYF,aAAa,U,8BAKnG,SAAiBiB,GAAU,IAAD,OACtB,OAAOA,EAAQ/E,KAAI,SAACC,GAChB,OAAO,EAAKgF,YAAYhF,Q,yBAIhC,SAAYA,GACR,OACI,yBAAK2D,IAAK3D,EAAMW,GAAIV,UAAU,qBAC1B,yBAAKA,UAAU,0BACX,6BAAMD,EAAMa,UACZ,6BAAK,0BAAMZ,UAAU,oBAAhB,UAAL,IAAwDD,EAAMG,QAC9D,6BAAK,0BAAMF,UAAU,qBAAhB,UAAL,IAAyDD,EAAMI,UAEnE,yBAAKH,UAAU,8BACVD,EAAMc,gB,gCAMvB,SAAmBmE,GACf,OAAgB,OAAZA,EACO,KAEJA,EAAQlF,KAAI,SAACmF,GAChB,OAAO,4BAAQvB,IAAKuB,EAAK,eAAgBlC,MAAOkC,GAAKA,Q,4BAe7D,WACI,OAA0C,OAAtC9F,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuB0B,KAEtC,K,6BAGX,WAAmB,IAAD,OACd,GAAmC,OAA/B5B,KAAKC,MAAM8F,gBAA0B,CACrC,IAAIC,EAAgBhG,KAAKC,MAAM8F,gBAAgB,GAO/C,OANA/F,KAAKC,MAAM8F,gBAAgBR,SAAQ,SAAA1D,GAC3BA,IAAU,EAAK5B,MAAMG,eACrB4F,EAAgB,EAAK/F,MAAMG,iBAI5B4F,EAEX,MAAO,K,oBAGX,WAAU,IAAD,OACL,OACI,yBAAKnF,UAAU,oBACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,4BAAf,WACA,yBAAKA,UAAU,4BAAf,QACA,4BAAQA,UAAU,4BAA4B+C,MAAO5D,KAAKiG,iBACtDnC,SAAU,SAACiB,GAAD,OAAO,EAAKD,iBAAiBC,KACtC/E,KAAKkG,mBAAmBlG,KAAKC,MAAMkG,iBAExC,yBAAKtF,UAAU,4BAAf,SACA,4BAAQA,UAAU,4BAA4B+C,MAAO5D,KAAKoG,kBACrDtC,SAAU,SAACiB,GAAD,OAAO,EAAKC,kBAAkBD,KACxC/E,KAAKkG,mBAAmBlG,KAAKC,MAAM8F,mBAG5C,yBAAKlF,UAAU,sBAAsBwF,kBAAA,EAAeC,2BAAyB,SACzE,yBAAKzF,UAAU,oBACNb,KAAKuG,WAAWvG,KAAKC,MAAMC,+B,GApH9BkB,IAAMC,WCwDjBmF,E,WA5DX,WAAYjF,EAAIM,GAAQ,oBACpB7B,KAAKuB,GAAKA,EACVvB,KAAK6B,MAAQA,EACb7B,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAKyG,eAAiB,G,wCAG1B,SAAKC,GACD1G,KAAKuB,GAAKmF,EAAUnF,GACpBvB,KAAK6B,MAAQ6E,EAAU7E,MACvB7B,KAAKO,YAAcmG,EAAUnG,YAC7BP,KAAKQ,aAAekG,EAAUlG,aAC9BR,KAAKyG,eAAiBC,EAAUD,iB,4BAGpC,WAAkB,IAAD,OACbzG,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAKyG,eAAelB,SAAQ,SAAA3E,GACxB,EAAKL,cAAgBK,EAAMG,OAC3B,EAAKP,eAAiBI,EAAMI,a,sBAIpC,SAASJ,GACLZ,KAAKyG,eAAepB,KAAKzE,GACzBZ,KAAK2G,mB,8BAGT,WACI,OAAsC,IAA/B3G,KAAKyG,eAAezD,S,6CAG/B,WACI,IAAM4D,EAAS,GAqBf,OApBA5G,KAAKyG,eAAelB,SAAQ,SAAA3E,GAExB,IADA,IAAIiG,GAAQ,EACHvC,EAAI,EAAGA,EAAIsC,EAAO5D,OAAQsB,IAAK,CACpC,IAAMwC,EAAIF,EAAOtC,GACjB,GAAIwC,EAAEhG,WAAaF,EAAME,SAAU,CAC/BgG,EAAE/F,SAAWH,EAAMG,OACnB+F,EAAE9F,UAAYJ,EAAMI,QACpB4F,EAAOtC,GAAKwC,EACZD,GAAQ,EACR,OAGHA,GACDD,EAAOvB,KAAK,CACRvE,SAAUF,EAAME,SAChBC,QAASH,EAAMG,OACfC,SAAUJ,EAAMI,aAIrB4F,M,KCgBAG,E,WAvEX,WAAYnF,GAAO,oBACf5B,KAAK4B,KAAOA,EACZ5B,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAKgH,kBAAoBhH,KAAKiH,0BAC9BjH,KAAKkF,WAAa,G,wCAGtB,SAAKwB,GACD1G,KAAK4B,KAAO8E,EAAU9E,KACtB5B,KAAKO,YAAcmG,EAAUnG,YAC7BP,KAAKQ,aAAekG,EAAUlG,aAC9BR,KAAKgH,kBAAoBhH,KAAKiH,0BAC9BjH,KAAKkF,WAAawB,EAAUxB,WAC5B,IAAK,IAAIZ,EAAI,EAAGA,EAAItE,KAAKgH,kBAAkBhE,OAAQsB,IAC/CtE,KAAKgH,kBAAkB1C,GAAG4C,KAAKR,EAAUM,kBAAkB1C,M,qCAInE,WAEI,IADA,IAAI6C,EAAa,IAAIC,MAAM,IAClB9C,EAAI,EAAGA,EAAI6C,EAAWnE,OAAQsB,IACnC6C,EAAW7C,GAAK,IAAIkC,EAAelC,EAAGA,EAAI,GAE9C,OAAO6C,I,4BAGX,WAAkB,IAAD,OACbnH,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAKgH,kBAAkBzB,SAAQ,SAAAmB,GAC3B,EAAKnG,cAAgBmG,EAAUnG,YAC/B,EAAKC,eAAiBkG,EAAUlG,kB,qCAIxC,SAAwBkG,GACpB1G,KAAKgH,kBAAkBN,EAAU7E,MAAQ,GAAK6E,EAC9C1G,KAAK2G,mB,sCAGT,SAAyB9E,EAAOjB,GACa,MAArCZ,KAAKgH,kBAAkBnF,EAAQ,IAC/B7B,KAAKgH,kBAAkBnF,EAAQ,GAAGwF,SAASzG,GAE/CZ,KAAK2G,mB,yBAGT,SAAY7F,GAER,OADAuB,QAAQC,IAAItC,KAAKkF,cACblF,KAAKkF,WAAWlC,OAAS,GAAKhD,KAAKkF,WAAWoC,SAASxG,MAG3Dd,KAAKkF,WAAWG,KAAKvE,IACd,K,iCAGX,SAAoBe,GAChB,OAAO7B,KAAKgH,kBAAkBnF,EAAQ,GAAGtB,c,kCAE7C,SAAqBsB,GACjB,OAAO7B,KAAKgH,kBAAkBnF,EAAQ,GAAGrB,e,6BAE7C,SAAgBqB,GACZ,OAAO7B,KAAKgH,kBAAkBnF,EAAQ,GAAG4E,iB,+BAE7C,SAAkB5E,GACd,OAAO7B,KAAKgH,kBAAkBnF,EAAQ,O,aCmP/B0F,E,kDAjSX,WAAYtH,GAAQ,IAAD,8BACf,cAAMA,IAbVuH,UAAY,0EAYO,EAXnBC,WAAa,EAWM,EAVnBC,eAAiBC,aAAY,WACrB,EAAKF,WAAa,IACM,IAApB,EAAKA,aACL,EAAKG,cACLvF,QAAQC,IAAI,qBAEd,EAAKmF,cAEZ,KAEgB,EA+CnBI,eAAiB,SAACjH,GACd,GAAyC,OAArC,EAAKkH,4BAAT,CAKA,IAAMC,EAA4B,EAAKD,4BACnCE,EAAuB,EAAK9F,MAAM+F,iBACtC,GAAIrH,EAAMY,KAAKI,OAASmG,EAA0BnG,KAAM,CACpD,IAAIsG,GAAU,EAOd,GANA,EAAKhG,MAAMiG,oBAAoB5C,SAAQ,SAACmB,EAAWpC,GAC3CoC,EAAU9E,OAAShB,EAAMY,KAAKI,OAC9BsG,GAAU,EACVF,EAAuB1D,MAG3B4D,EAEA,YADA,EAAKE,+BAA+BxH,GAI5C,IAAMyH,EAAyB,EAAKnG,MAAMiG,oBAC1CE,EAAuBL,GAAsBM,YAAY1H,EAAME,UAC/DuH,EAAuBL,GAAsBO,yBAAyB3H,EAAMY,KAAKK,MAAOjB,GACxF,EAAKiC,SAAS,CACVsF,oBAAqBE,EACrBJ,iBAAkBD,EAClB5H,aAAcQ,EAAMY,KAAKK,QAE7B,EAAK2G,2BA3BD,EAAKJ,+BAA+BxH,IAjDzB,EA+EnB6H,kBAAoB,SAACC,GACjB,IAAMX,EAA4B,EAAKD,4BACnCC,EAA0BO,YAAYI,IACtC,EAAKC,0BAA0BZ,IAlFpB,EA4GnBa,qBAAuB,SAAChH,GAEpB,IADA,IAAMuG,EAAsB,EAAKjG,MAAMiG,oBAC/B7D,EAAI,EAAGA,EAAI6D,EAAoBnF,SAAUsB,EAC7C,GAAI6D,EAAoB7D,GAAG1C,OAASA,EAAM,CACtC,IAAIiH,GAAuB,EAS3B,OARAV,EAAoB7D,GAAG0C,kBAAkBzB,SAAQ,SAAAuD,GACxCA,EAAeC,qBAChBF,EAAsBC,EAAejH,UAI7C,EAAKgB,SAAS,CAACoF,iBAAkB3D,EAAGlE,aAAcyI,SAClD,EAAKL,wBAxHE,EA8HnBQ,sBAAwB,SAACnH,GACrB,EAAKgB,SAAS,CAACzC,aAAcyB,IAC7B,EAAK2G,uBAhIU,EAmInBS,mBAAqB,SAACC,GAClB,EAAKrG,SAAS,CACVsG,UAAWD,EAASE,WAAWC,MAC/BC,SAAUJ,EAASE,WAAWG,KAC9BC,YAAY,IAGhBC,MAAM,SAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,YAAaV,EAASW,SAASC,gBAGlCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACH7H,QAAQC,IAAI4H,EAAKC,SACjB,EAAKC,uBAnJE,EAuJnBC,mBAAqB,SAACnB,GAClB7G,QAAQC,IAAI,6BACZD,QAAQC,IAAI4G,IAzJG,EA4JnBoB,oBAAsB,WAClB,EAAKzH,SAAS,CACV2G,YAAY,EACZF,SAAU,GACVH,UAAW,GACX/I,aAAc,EACd6H,iBAAkB,EAClBE,oBAAqB,KAEzB9F,QAAQC,IAAI,sCArKG,EAwKnBsF,YAAc,WACL,EAAK1F,MAAMsH,aAGhB,EAAK3G,SAAS,CAAC0H,UAAU,IACzBd,MAAM,QAAS,CACXC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBa,KAAMC,KAAKC,UAAU,EAAKxI,SAE7B6H,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEH7H,QAAQC,IAAI4H,EAAKC,SACjB9H,QAAQC,IAAR,uBAA4B4H,EAAKS,OAAS,UAAY,YACtD,EAAK9H,SAAS,CAAC0H,UAAU,SA1Ld,EA8LnBH,iBAAmB,WACfX,MAAM,QACDM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEH,GAAsB,OAAlBA,EAAKU,SAAT,CAMA,IAAMzC,EAAsB,GAC5B+B,EAAKU,SAASzC,oBAAoB5C,SAAQ,SAAAmB,GACtC,IAAMmE,EAAe,IAAI9D,EAAgBL,EAAU9E,MACnDiJ,EAAa3D,KAAKR,GAClByB,EAAoB9C,KAAKwF,MAG7B,EAAKhI,SAAS,CACVzC,aAAc8J,EAAKU,SAASxK,aAC5B6H,iBAAkBiC,EAAKU,SAAS3C,iBAChCE,oBAAqBA,IAEzB9F,QAAQC,IAAI4H,EAAKC,cAhBb,EAAKvC,kBAlMjB,EAAK1F,MAAQ,CACTsH,YAAY,EACZF,SAAU,GACVH,UAAW,GACXoB,UAAU,EACVnK,aAAc,EACd6H,iBAAkB,EAClBE,oBAAqB,IAVV,E,uDAcnB,WACQnI,KAAKyH,WAAa,KAChBzH,KAAKyH,a,uCAIf,WACI,OAA8C,IAA1CzH,KAAKkC,MAAMiG,oBAAoBnF,OACxB,KAEJhD,KAAKkC,MAAMiG,oBAAoBnI,KAAKkC,MAAM+F,oB,uCAGrD,SAA0B4C,GACtB,IAAIC,EAAwB9K,KAAKkC,MAAMiG,oBACvC2C,EAAsB9K,KAAKkC,MAAM+F,kBAAoB4C,EACrD7K,KAAK6C,SAAS,CAACsF,oBAAqB2C,IACpC9K,KAAKwI,wB,4CAGT,SAA+B5H,GAC3B,IAAMyH,EAAyBrI,KAAKkC,MAAMiG,oBACpC4C,EAAqB,IAAIhE,EAAgBnG,EAAMY,KAAKI,MAC1DmJ,EAAmBzC,YAAY1H,EAAME,UACrCiK,EAAmBxC,yBAAyB3H,EAAMY,KAAKK,MAAOjB,GAC9DyH,EAAuBhD,KAAK0F,GAC5B,IAAMC,EAAsB3C,EAAuBrF,OAAS,EAC5DhD,KAAK6C,SAAS,CAACsF,oBAAqBE,EAChCJ,iBAAkB+C,EAClB5K,aAAcQ,EAAMY,KAAKK,QAC7B7B,KAAKwI,wB,+BA0CT,WACI,IAAIyC,EAAQ,GAIZ,OAHAjL,KAAKkC,MAAMiG,oBAAoB5C,SAAQ,SAAAmB,GACnCuE,EAAM5F,KAAKqB,EAAU9E,SAElBqJ,I,gCAGX,WACI,IAAIpJ,EAAQ,GACN3B,EAAyBF,KAAK8H,4BACpC,OAA8B,MAA1B5H,EACO,MAEXA,EAAuB8G,kBAAkBzB,SAAQ,SAAAuD,GACxCA,EAAeC,oBAChBlH,EAAMwD,KAAKyD,EAAejH,UAG3BA,K,oBAgHX,WACI,OACI,yBAAKhB,UAAU,kBACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,0BAAf,UAEJ,yBAAKA,UAAU,mCAAmCwF,kBAAA,GAC9C,yBAAKxF,UAAU,2BACX,yBAAKA,UAAS,8BAA0Bb,KAAKkC,MAAMsH,WAAoC,GAAvB,uBAC5D,yBAAK3I,UAAU,6BACX,6BAAMb,KAAKkC,MAAMoH,UACjB,6BAAMtJ,KAAKkC,MAAMiH,YAErB,yBAAKtI,UAAS,qCAAiCb,KAAKkC,MAAMqI,SAAmC,GAAvB,uBAAtE,6BAGA,kBAAC,eAAD,CACIW,SAAUlL,KAAKwH,UACf2D,WAAW,UACXC,gBAAiBpL,KAAKsK,oBACtBe,OAAQ,SAAAC,GAAW,OACf,4BAAQtH,QAASsH,EAAYtH,QAC7BuH,SAAUD,EAAYC,SACtB1K,UAAU,2BAFV,eAOZ,yBAAKA,UAAS,yCAAoCb,KAAKkC,MAAMsH,WAAa,qBAAuB,KAC7F,kBAAC,cAAD,CACI0B,SAAUlL,KAAKwH,UACfgE,UAAWxL,KAAKiJ,mBAChBwC,UAAWzL,KAAKqK,mBAChBqB,aAAc,qBACdC,MAAO,sFACPnC,YAAY,EACZ6B,OAAQ,SAAAC,GAAW,OACf,4BAAQtH,QAASsH,EAAYtH,QAC7BuH,SAAUD,EAAYC,SACtB1K,UAAU,2BAFV,8CAQhB,kBAAC,EAAD,CAAaX,uBAAwBF,KAAK8H,4BAC9B1H,aAAcJ,KAAKkC,MAAM9B,eACrC,6BACA,kBAAC,EAAD,CAASF,uBAAwBF,KAAK8H,4BAC9B9F,WAAYhC,KAAK6H,eACjB/E,cAAe9C,KAAKyI,sBAIpC,yBAAK5H,UAAU,2BACZ,kBAAC,EAAD,CAAaX,uBAAwBF,KAAK8H,4BAC7B1H,aAAcJ,KAAKkC,MAAM9B,aACzB0E,iBAAkB9E,KAAK4I,qBACvB5D,kBAAmBhF,KAAKgJ,sBACxB7C,eAAgBnG,KAAK4L,oBACrB7F,gBAAiB/F,KAAK6L,8B,GArSlCzK,IAAMC,WCKfyK,MAVf,WACE,OACE,yBAAKjL,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,SCGOkL,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.804ce05a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SummaryPage.css'\r\n\r\nclass SummaryPage extends React.Component {\r\n\r\n    getMonthTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalIncome(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getMonthTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalExpense(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalIncome.toFixed(2)\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalExpense.toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    renderCategoryTotals() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            const monthStatement = this.props.currentAnnualStatement.getMonthStatement(this.props.currentMonth);\r\n            const categoriesTotal = monthStatement.getCategoriesIncomeExpenseTotal();\r\n            return categoriesTotal.map((entry) => {\r\n                return <div className=\"SummaryPage-income-expense-category\">\r\n                        {entry.category}: \r\n                        <span className=\"income-indicator\">&#9650;</span> ${entry.income} \r\n                        <span className=\"expense-indicator\">&#9660;</span> ${entry.expense} \r\n                    </div>\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SummaryPage-body\">\r\n                <div className=\"SummaryPage-header-label SummaryPage-main-header-label\">Summary</div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Month</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getMonthTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getMonthTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                            {this.renderCategoryTotals()}\r\n                        </div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Year</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getAnnualTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getAnnualTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SummaryPage;","class Entry {\r\n    constructor(id, date, income, expense, category, location, description) {\r\n        this.id = id;\r\n        this.date = date;\r\n        this.income = income;\r\n        this.expense = expense;\r\n        this.category = category;\r\n        this.location = location;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport default Entry;","class Date {\r\n    constructor(year, month, day) {\r\n        this.year = year;\r\n        this.month = +month;\r\n        this.day = +day;\r\n    }\r\n\r\n    equal(date) {\r\n        return this.year === date.year && this.month === date.month && this.day === date.day;\r\n    }\r\n}\r\n\r\nexport default Date;","import React from 'react';\r\nimport './AddPage.css'\r\nimport Entry from './Entry';\r\nimport Date from './Date';\r\n\r\nclass AddPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            idCount: 0,\r\n            inputDate: \"2022/1/1\",             // 0\r\n            inputCategory: \"abc\",         // 1\r\n            inputLocation: \"soeb\",         // 2\r\n            inputIncome: \"123\",           // 3\r\n            inputExpense: \"423\",          // 4\r\n            inputDescription: \"dsafsafsd\",      // 5\r\n            inputNewCategory: \"\",      // 6\r\n        }\r\n    }\r\n\r\n    timeNow() {\r\n        var today = new Date();\r\n        var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        return date + \" \" + time;\r\n    }\r\n\r\n    onAddEntry = () => {\r\n        let dateParts = this.state.inputDate.split(\"/\");\r\n        console.log(dateParts);\r\n        this.props.onAddEntry(new Entry(\r\n            this.state.idCount, \r\n            new Date(dateParts[0], dateParts[1], dateParts[2]), \r\n            this.state.inputIncome, \r\n            this.state.inputExpense, \r\n            this.state.inputCategory, \r\n            this.state.inputLocation, \r\n            this.state.inputDescription));\r\n        this.setState({idCount: this.state.idCount + 1});\r\n        console.log(this.state.inputIncome);\r\n    }\r\n\r\n    onAddCategory = () => {\r\n        if (this.state.inputNewCategory.length > 0) {\r\n            this.props.onAddCategory(this.state.inputNewCategory);\r\n        }\r\n    }\r\n\r\n    updateInput(field, evt) {\r\n        const val = evt.target.value;\r\n        if (field === 0) \r\n            this.setState({inputDate: val});\r\n        else if (field === 1) \r\n            this.setState({inputCategory: val});\r\n        else if (field === 2) \r\n            this.setState({inputLocation: val});\r\n        else if (field === 3) \r\n            this.setState({inputIncome: val});\r\n        else if (field === 4) \r\n            this.setState({inputExpense: val});\r\n        else if (field === 5) \r\n            this.setState({inputDescription: val});\r\n        else if (field === 6)\r\n            this.setState({inputNewCategory: val});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AddPage-body\">\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Entry\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Date</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputDate}\r\n                            onChange={evt => this.updateInput(0, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputCategory}\r\n                            onChange={evt => this.updateInput(1, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Location</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputLocation}\r\n                            onChange={evt => this.updateInput(2, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Income</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputIncome}\r\n                            onChange={evt => this.updateInput(3, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Expense</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputExpense}\r\n                            onChange={evt => this.updateInput(4, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Description</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputDescription}\r\n                            onChange={evt => this.updateInput(5, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddEntry()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\">Clear</button>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Category\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\" \r\n                            value={this.state.inputNewCategory}\r\n                            onChange={evt => this.updateInput(6, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddCategory()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\">Clear</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPage;","import React from \"react\";\r\n\r\nclass GridCell extends React.Component {\r\n\r\n    static cellId = 0;\r\n    static newCellId() {\r\n        this.cellId++;\r\n        return this.cellId;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= {this.props.isDate ? \"grid-cell grid-cell-date\" : \"grid-cell\"}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridCell;","import React from \"react\";\r\nimport GridCell from \"./GridCell\";\r\nimport \"./Grid.css\"\r\n\r\nclass GridRow extends React.Component {\r\n\r\n    static rowId = 0;\r\n    static newRowId() {\r\n        this.rowId++;\r\n        return this.rowId;\r\n    }\r\n\r\n    renderCells(columnRow) {\r\n        return columnRow.map((val, i) => {\r\n            if (val === null) {\r\n                return <GridCell key={GridCell.newCellId()  + \"-cell\" } value={null} isDate={false} />;\r\n            } else {\r\n                if (i === 0) {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={true}/>;\r\n                } else {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={false}/>;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.isHeaderRow ? \"grid-row grid-header-row\": \"grid-row\" }>\r\n                {this.renderCells(this.props.rowContent)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridRow;","import React from \"react\";\r\nimport './HistoryPage.css'\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport GridRow from \"./GridRow\";\r\n\r\nclass HistoryPage extends React.Component {\r\n\r\n    renderGrid(annualStatement) {\r\n        if (annualStatement === null) {\r\n            return;\r\n        }\r\n        const categories = annualStatement.categories;\r\n        let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        let dates = [[\"Dates\"]];\r\n        for (let i = 0; i < 31; i++) {\r\n            dates.push([months[this.props.currentMonth - 1] + \" \" + (i + 1) + \", \" + this.props.currentAnnualStatement.year]);\r\n        }\r\n\r\n        return dates.map((date, i) => {\r\n            if (date[0] === \"Dates\") {\r\n                let headerRowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    headerRowContent.push([categoryName]);\r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={headerRowContent} isHeaderRow={true}/>\r\n            } else {\r\n                let entries = this.props.currentAnnualStatement.getMonthEntries(this.props.currentMonth);\r\n                let rowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    rowContent.push([]);\r\n                    entries.forEach(entry => {\r\n                        if (entry.category === categoryName && entry.date.day === +i) {\r\n                            rowContent[rowContent.length - 1].push(this.renderEntry(entry));\r\n                        }\r\n                    });                \r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={rowContent} isHeaderRow={false}/>\r\n            }\r\n        })\r\n    }\r\n\r\n    renderAllEntries(entries) {\r\n        return entries.map((entry) => {\r\n            return this.renderEntry(entry);\r\n        });\r\n    }\r\n\r\n    renderEntry(entry) {\r\n        return (\r\n            <div key={entry.id} className=\"HistoryPage-entry\">\r\n                <div className=\"HistoryPage-entry-main\">\r\n                    <div>{entry.location}</div>\r\n                    <div><span className=\"income-indicator\">&#9650;</span>${entry.income}</div>\r\n                    <div><span className=\"expense-indicator\">&#9660;</span>${entry.expense}</div>\r\n                </div>\r\n                <div className=\"HistoryPage-entry-collapse\">\r\n                    {entry.description}\r\n                </div>\r\n            </div>   \r\n        );\r\n    }\r\n\r\n    renderSelectOption(options) {\r\n        if (options === null) {\r\n            return null;\r\n        }\r\n        return options.map((op) => {\r\n            return <option key={op + \"-view-option\"} value={op}>{op}</option>;\r\n        });\r\n    }\r\n\r\n    onChangeViewYear = (e) => {\r\n        const year = e.target.value;\r\n        this.props.onChangeViewYear(year);\r\n    }\r\n\r\n    onChangeViewMonth =(e) => {\r\n        const month = e.target.value;\r\n        console.log(\"Changed: \" + month);\r\n        this.props.onChangeViewMonth(month);\r\n    }\r\n\r\n    getCurrentYear() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.year;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getCurrentMonth() {\r\n        if (this.props.availableMonths !== null) {\r\n            let selectedMonth = this.props.availableMonths[0];\r\n            this.props.availableMonths.forEach(month => {\r\n                if (month === this.props.currentMonth) {\r\n                    selectedMonth = this.props.currentMonth;\r\n                    return;\r\n                }\r\n            });\r\n            return selectedMonth;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"HistoryPage-body\">\r\n                <div className=\"HistoryPage-header-content\">\r\n                    <div className=\"HistoryPage-header-label\">History</div>\r\n                    <div className=\"HistoryPage-select-label\">Year</div>\r\n                    <select className=\"HistoryPage-header-select\" value={this.getCurrentYear()} \r\n                        onChange={(e) => this.onChangeViewYear(e)}>\r\n                        {this.renderSelectOption(this.props.availableYears)}\r\n                    </select>\r\n                    <div className=\"HistoryPage-select-label\">Month</div>\r\n                    <select className=\"HistoryPage-header-select\" value={this.getCurrentMonth()}\r\n                         onChange={(e) => this.onChangeViewMonth(e)}>\r\n                        {this.renderSelectOption(this.props.availableMonths)}\r\n                    </select>\r\n                </div>\r\n                <div className=\"HistoryPage-content\" data-simplebar data-simplebar-auto-hide=\"false\">\r\n                    <div className=\"HistoryPage-grid\">\r\n                            {this.renderGrid(this.props.currentAnnualStatement)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HistoryPage;","\r\nclass MonthStatement {\r\n    constructor(id, month) {\r\n        this.id = id;\r\n        this.month = month;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.id = statement.id;\r\n        this.month = statement.month;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyEntires = statement.monthlyEntires;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires.forEach(entry => {\r\n            this.totalIncome += +entry.income;\r\n            this.totalExpense += +entry.expense;\r\n        });\r\n    }\r\n\r\n    addEntry(entry) {\r\n        this.monthlyEntires.push(entry);\r\n        this.calculateTotal();\r\n    }\r\n\r\n    isStatementEmpty() {\r\n        return this.monthlyEntires.length === 0;\r\n    }\r\n\r\n    getCategoriesIncomeExpenseTotal() {\r\n        const totals = [];\r\n        this.monthlyEntires.forEach(entry => {\r\n            var added = false;\r\n            for (let i = 0; i < totals.length; i++) {\r\n                const t = totals[i];\r\n                if (t.category === entry.category) {\r\n                    t.income += +entry.income;\r\n                    t.expense += +entry.expense;\r\n                    totals[i] = t;\r\n                    added = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!added) {\r\n                totals.push({\r\n                    category: entry.category, \r\n                    income: +entry.income, \r\n                    expense: +entry.expense\r\n                });\r\n            }\r\n        });\r\n        return totals;\r\n    }\r\n}\r\n\r\nexport default MonthStatement;","import MonthStatement from \"./MonthStatement\";\r\n\r\nclass AnnualStatement {\r\n    constructor(year) {\r\n        this.year = year;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.year = statement.year;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = statement.categories;\r\n        for (let i = 0; i < this.monthlyStatements.length; i++) {\r\n            this.monthlyStatements[i].copy(statement.monthlyStatements[i]);\r\n        }\r\n    }\r\n\r\n    initEmptyMonthStatement() {\r\n        let statements = new Array(12);\r\n        for (let i = 0; i < statements.length; i++) {\r\n            statements[i] = new MonthStatement(i, i + 1);\r\n        }\r\n        return statements;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements.forEach(statement => {\r\n            this.totalIncome += +statement.totalIncome;\r\n            this.totalExpense += +statement.totalExpense;\r\n        });\r\n    }\r\n\r\n    replaceMonthlyStatement(statement) {\r\n        this.monthlyStatements[statement.month - 1] = statement;\r\n        this.calculateTotal();\r\n    }\r\n\r\n    addEntryToMonthStatement(month, entry) {\r\n        if (this.monthlyStatements[month - 1] != null) {\r\n            this.monthlyStatements[month - 1].addEntry(entry);\r\n        }\r\n        this.calculateTotal();\r\n    }\r\n\r\n    addCategory(category) {\r\n        console.log(this.categories);\r\n        if (this.categories.length > 0 && this.categories.includes(category)) {\r\n            return false;\r\n        }\r\n        this.categories.push(category);\r\n        return true;\r\n    }\r\n\r\n    getMonthTotalIncome(month) {\r\n        return this.monthlyStatements[month - 1].totalIncome;\r\n    }\r\n    getMonthTotalExpense(month) {\r\n        return this.monthlyStatements[month - 1].totalExpense;\r\n    }\r\n    getMonthEntries(month) {\r\n        return this.monthlyStatements[month - 1].monthlyEntires;\r\n    }\r\n    getMonthStatement(month) {\r\n        return this.monthlyStatements[month - 1];\r\n    }\r\n}\r\n\r\nexport default AnnualStatement;","import React from \"react\";\r\nimport SummaryPage from \"./SummaryPage\";\r\nimport './Dashboard.css'\r\nimport AddPage from \"./AddPage\";\r\nimport HistoryPage from \"./HistoryPage\";\r\nimport AnnualStatement from \"./AnnualStatement\";\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport { GoogleLogin, GoogleLogout } from \"react-google-login\";\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n    CLIENT_ID = '91993730445-4jjm5pf1kvja9m8r6b66uarvnqmdir1b.apps.googleusercontent.com';\r\n    ClickCount = 0;\r\n    saveIntervalId = setInterval(() => {\r\n        if (this.ClickCount > 0) {\r\n            if (this.ClickCount === 1) {\r\n                this.saveToDrive();\r\n                console.log(\"Saved to drive\");\r\n            }\r\n            --this.ClickCount;\r\n        }\r\n    }, 1000);\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            isSaving: false,\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        }\r\n    }\r\n    \r\n    incrementClickCount() {\r\n        if (this.ClickCount < 2) {\r\n            ++this.ClickCount;\r\n        }\r\n    }\r\n\r\n    getCurrentAnnualStatement() {\r\n        if (this.state.allAnnualStatements.length === 0) {\r\n            return null;\r\n        }\r\n        return this.state.allAnnualStatements[this.state.currentYearIndex];\r\n    }\r\n\r\n    setCurrentAnnualStatement(newStatement) {\r\n        let newAllAnnualStatement = this.state.allAnnualStatements;\r\n        newAllAnnualStatement[this.state.currentYearIndex] = newStatement;\r\n        this.setState({allAnnualStatements: newAllAnnualStatement});\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    addNewAnnualStatementWithEntry(entry) {\r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        const newAnnualStatement = new AnnualStatement(entry.date.year);\r\n        newAnnualStatement.addCategory(entry.category);\r\n        newAnnualStatement.addEntryToMonthStatement(entry.date.month, entry);\r\n        newAllAnnualStatements.push(newAnnualStatement);\r\n        const newCurrentYearIndex = newAllAnnualStatements.length - 1;\r\n        this.setState({allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: newCurrentYearIndex,\r\n            currentMonth: entry.date.month});\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    handleNewEntry = (entry) => {\r\n        if (this.getCurrentAnnualStatement() === null) {\r\n            this.addNewAnnualStatementWithEntry(entry);\r\n            return;\r\n        }\r\n\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        let annualStatementIndex = this.state.currentYearIndex;\r\n        if (entry.date.year !== newCurrentAnnualStatement.year) {\r\n            let yearDNE = true;\r\n            this.state.allAnnualStatements.forEach((statement, i) => {\r\n                if (statement.year === entry.date.year) {\r\n                    yearDNE = false;\r\n                    annualStatementIndex = i;\r\n                } \r\n            });\r\n            if (yearDNE) {\r\n                this.addNewAnnualStatementWithEntry(entry);\r\n                return;\r\n            } \r\n        } \r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        newAllAnnualStatements[annualStatementIndex].addCategory(entry.category);\r\n        newAllAnnualStatements[annualStatementIndex].addEntryToMonthStatement(entry.date.month, entry);\r\n        this.setState({\r\n            allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: annualStatementIndex,\r\n            currentMonth: entry.date.month\r\n        });\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    handleNewCategory = (c) => {\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (newCurrentAnnualStatement.addCategory(c)) {\r\n            this.setCurrentAnnualStatement(newCurrentAnnualStatement);\r\n        }\r\n    }\r\n\r\n    getAvailableYears() {\r\n        let years = [];\r\n        this.state.allAnnualStatements.forEach(statement => {\r\n            years.push(statement.year);\r\n        });\r\n        return years;\r\n    }\r\n\r\n    getAvailableMonths() {\r\n        let month = [];\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (currentAnnualStatement == null) {\r\n            return null;\r\n        }\r\n        currentAnnualStatement.monthlyStatements.forEach(monthStatement => {\r\n            if (!monthStatement.isStatementEmpty()) {\r\n                month.push(monthStatement.month);\r\n            }\r\n        });\r\n        return month;\r\n    }\r\n\r\n    handleChangeViewYear = (year) => {\r\n        const allAnnualStatements = this.state.allAnnualStatements;\r\n        for(let i = 0; i < allAnnualStatements.length; ++i) {\r\n            if (allAnnualStatements[i].year === year) {\r\n                let firstAvailableMonth = -1;\r\n                allAnnualStatements[i].monthlyStatements.forEach(monthStatement => {\r\n                    if (!monthStatement.isStatementEmpty()) {\r\n                        firstAvailableMonth = monthStatement.month;\r\n                    }\r\n                });\r\n\r\n                this.setState({currentYearIndex: i, currentMonth: firstAvailableMonth});\r\n                this.incrementClickCount();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChangeViewMonth = (month) => {\r\n        this.setState({currentMonth: month});\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    successLoginGoogle = (response) => {\r\n        this.setState({\r\n            userEmail: response.profileObj.email,\r\n            userName: response.profileObj.name,\r\n            isSignedIn: true\r\n        });\r\n\r\n        fetch('/login', {\r\n            method: 'GET',\r\n            headers: {\r\n                accessToken: response.tokenObj.access_token\r\n            }\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log(data.message);\r\n                this.getDataFromDrive();\r\n            });\r\n    }\r\n\r\n    failureLoginGoogle = (response) => {\r\n        console.log(\"failed to login to google\");\r\n        console.log(response);\r\n    }\r\n\r\n    successLogoutGoogle = () => {\r\n        this.setState({\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        });\r\n        console.log(\"successfully logged out of google\");\r\n    }\r\n\r\n    saveToDrive = () => {\r\n        if (!this.state.isSignedIn) {\r\n            return;\r\n        }\r\n        this.setState({isSaving: true});\r\n        fetch(`/save`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            // add icon to show this in UI \r\n            console.log(data.message);\r\n            console.log(`Save Status: ${data.status ? \"Success\" : \"Failure\"}`);\r\n            this.setState({isSaving: false});\r\n        });\r\n    }\r\n\r\n    getDataFromDrive = () => {\r\n        fetch(`/get`)\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                // save file not found in GDrive\r\n                if (data.userData === null) {\r\n                    // Make a new save file \r\n                    this.saveToDrive();\r\n                    return;\r\n                }\r\n\r\n                const allAnnualStatements = [];\r\n                data.userData.allAnnualStatements.forEach(statement => {\r\n                    const newStatement = new AnnualStatement(statement.year);\r\n                    newStatement.copy(statement);\r\n                    allAnnualStatements.push(newStatement);\r\n                });\r\n\r\n                this.setState({\r\n                    currentMonth: data.userData.currentMonth,\r\n                    currentYearIndex: data.userData.currentYearIndex,\r\n                    allAnnualStatements: allAnnualStatements\r\n                });\r\n                console.log(data.message); \r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Dashboard-body\">\r\n                <div className=\"Dashboard-content\">\r\n                    <div className=\"Dashbaord-content-left\" >\r\n                        <div className=\"Dashboard-header\">\r\n                            <div className=\"Dashboard-header-label\">MFlow</div>\r\n                        </div>\r\n                        <div className=\"Dashboard-content-left-scrollabe\" data-simplebar>\r\n                            <div className=\"Dashboard-account-block\">\r\n                                <div className={`Dashboard-user-info ${!this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <div className=\"Dashboard-user-info-texts\">\r\n                                        <div>{this.state.userName}</div>\r\n                                        <div>{this.state.userEmail}</div>\r\n                                    </div>\r\n                                    <div className={`Dashboard-save-status-text ${!this.state.isSaving ?  \"Dashboard-disabled\" : \"\"}`}>\r\n                                        Saving to Google Drive...\r\n                                        </div>\r\n                                    <GoogleLogout \r\n                                        clientId={this.CLIENT_ID}\r\n                                        buttonText=\"Log out\"\r\n                                        onLogoutSuccess={this.successLogoutGoogle}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log out\r\n                                                </button>\r\n                                          )}/>\r\n                                </div>\r\n                                <div className={`Dashboard-google-login-wrapper ${this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <GoogleLogin \r\n                                        clientId={this.CLIENT_ID}\r\n                                        onSuccess={this.successLoginGoogle}\r\n                                        onFailure={this.failureLoginGoogle}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                        scope={'https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.appdata'}\r\n                                        isSignedIn={true}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log in with Google to save your data!\r\n                                            </button>\r\n                                          )}/>\r\n                                </div>\r\n                            </div>\r\n                            <SummaryPage currentAnnualStatement={this.getCurrentAnnualStatement()}\r\n                                        currentMonth={this.state.currentMonth} />\r\n                            <br/>\r\n                            <AddPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    onAddEntry={this.handleNewEntry}\r\n                                    onAddCategory={this.handleNewCategory}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"Dashboard-content-right\">\r\n                       <HistoryPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    currentMonth={this.state.currentMonth}\r\n                                    onChangeViewYear={this.handleChangeViewYear}\r\n                                    onChangeViewMonth={this.handleChangeViewMonth}\r\n                                    availableYears={this.getAvailableYears()}\r\n                                    availableMonths={this.getAvailableMonths()}/>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Dashboard;","import './App.css';\r\nimport Dashboard from './Dashboard.js';\r\nimport React from 'react';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-body\">\r\n        <Dashboard />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}