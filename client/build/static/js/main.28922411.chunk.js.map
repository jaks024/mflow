{"version":3,"sources":["SummaryPage.js","Entry.js","Date.js","AddPage.js","GridCell.js","GridRow.js","HistoryPage.js","MonthStatement.js","AnnualStatement.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["SummaryPage","this","props","currentAnnualStatement","getMonthTotalIncome","currentMonth","toFixed","getMonthTotalExpense","totalIncome","totalExpense","monthStatement","getMonthStatement","getCategoriesIncomeExpenseTotal","map","entry","key","category","className","income","expense","getAllCategoryTotals","totals","renderMonthCategoryTotals","getAnnualTotalIncome","getAnnualTotalExpense","renderYearCategoryTotals","React","Component","Entry","id","date","location","description","Date","year","month","day","AddPage","monthsAndDays","name","num","days","onAddEntry","monthNumeric","state","inputMonth","isNaN","inputIncome","inputExpense","trim","length","inputCategory","inputLocation","idCount","inputYear","inputDay","inputDescription","setState","onAddCategory","inputNewCategory","onClearForm","onClearCateogryForm","onChangeInputYear","e","target","value","onChangeInputMonth","console","log","onChangeInputDay","today","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","field","evt","val","options","keySuffix","op","years","i","push","renderOptions","months","forEach","onChange","renderYearOptions","renderMonthOptions","renderDayOptions","inputMode","updateInput","onClick","GridCell","isDate","cellId","GridRow","columnRow","newCellId","isHeaderRow","renderCells","rowContent","rowId","HistoryPage","onChangeViewYear","onChangeViewMonth","m","annualStatement","categories","rows","headerRowContent","categoryName","renderHeader","newRowId","entries","getMonthEntries","renderEntry","text","onDeleteCategory","onDeleteEntry","availableMonths","selectedMonth","namedMonths","getCurrentYear","renderSelectOption","availableYears","numericMonthToNamed","data-simplebar","data-simplebar-auto-hide","renderGrid","MonthStatement","monthlyEntires","statement","calculateTotal","added","t","entryId","filter","AnnualStatement","monthlyStatements","initEmptyMonthStatement","copy","statements","Array","index","isIndexInMonthlyStatementRange","addEntry","includes","deleteEntry","replaceMonthlyStatement","cat","deleteEntryByCategory","categoriesTotalMap","Map","has","oldTotal","get","newTotalIncome","newTotalExpense","set","from","Dashboard","CLIENT_ID","editCount","saveIntervalId","setInterval","saveToDrive","handleNewEntry","getCurrentAnnualStatement","newCurrentAnnualStatement","annualStatementIndex","currentYearIndex","yearDNE","allAnnualStatements","addNewAnnualStatementWithEntry","newAllAnnualStatements","addCategory","addEntryToMonthStatement","incrementEditCount","handleNewCategory","c","setCurrentAnnualStatement","handleDeleteEntry","handleNoEntriesInMonth","handleDeleteCategory","deleteCategory","handleChangeViewYear","firstAvailableMonth","isStatementEmpty","handleChangeViewMonth","handleDownloadData","a","json","JSON","stringify","undefined","blob","Blob","type","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","successLoginGoogle","response","userEmail","profileObj","email","userName","isSignedIn","fetch","method","headers","accessToken","tokenObj","access_token","then","res","data","message","getDataFromDrive","failureLoginGoogle","successLogoutGoogle","isSaving","status","userData","newStatement","newAllAnnualStatement","newAnnualStatement","newCurrentYearIndex","getAvailableMonths","sort","clientId","buttonText","onLogoutSuccess","render","renderProps","disabled","onSuccess","onFailure","cookiePolicy","scope","getAvailableYears","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28922411.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SummaryPage.css'\r\n\r\nclass SummaryPage extends React.Component {\r\n\r\n    getMonthTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalIncome(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getMonthTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalExpense(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalIncome.toFixed(2)\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalExpense.toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    renderMonthCategoryTotals() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            const monthStatement = this.props.currentAnnualStatement.getMonthStatement(this.props.currentMonth);\r\n            if (monthStatement === null) {\r\n                return null;\r\n            }\r\n            const categoriesTotal = monthStatement.getCategoriesIncomeExpenseTotal();\r\n            return categoriesTotal.map((entry) => {\r\n                return <div key={entry.category + \"-summary-month-subtotal-category-name\"} className=\"SummaryPage-income-expense-category\">\r\n                        {entry.category}: &emsp;\r\n                        <span className=\"income-indicator\">&#9650;</span> ${entry.income} &emsp;\r\n                        <span className=\"expense-indicator\">&#9660;</span> ${entry.expense} \r\n                    </div>\r\n            });\r\n        }\r\n        return null;\r\n    }\r\n\r\n    renderYearCategoryTotals() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            const allCategoriesTotal = this.props.currentAnnualStatement.getAllCategoryTotals();\r\n            return allCategoriesTotal.map((entry) => {\r\n                return <div key={entry.category + \"-summary-year-subtotal-category-name\"} className=\"SummaryPage-income-expense-category\">\r\n                        {entry.category}: &emsp;\r\n                        <span className=\"income-indicator\">&#9650;</span> ${entry.totals.income} &emsp;\r\n                        <span className=\"expense-indicator\">&#9660;</span> ${entry.totals.expense} \r\n                    </div>\r\n            });\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SummaryPage-body\">\r\n                <div className=\"SummaryPage-header-label SummaryPage-main-header-label\">Summary</div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Month</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getMonthTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getMonthTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {this.renderMonthCategoryTotals()}\r\n                </div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Year</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getAnnualTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getAnnualTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {this.renderYearCategoryTotals()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SummaryPage;","class Entry {\r\n    constructor(id, date, income, expense, category, location, description) {\r\n        this.id = id;\r\n        this.date = date;\r\n        this.income = income;\r\n        this.expense = expense;\r\n        this.category = category;\r\n        this.location = location;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport default Entry;","class Date {\r\n    constructor(year, month, day) {\r\n        this.year = +year;\r\n        this.month = +month;\r\n        this.day = +day;\r\n    }\r\n\r\n    equal(date) {\r\n        return this.year === date.year && this.month === date.month && this.day === date.day;\r\n    }\r\n}\r\n\r\nexport default Date;","import React from 'react';\r\nimport './AddPage.css'\r\nimport Entry from './Entry';\r\nimport Date from './Date';\r\n\r\nclass AddPage extends React.Component {\r\n\r\n    monthsAndDays = [\r\n        {name: \"Jan\", num: 1, days: 31},\r\n        {name: \"Feb\", num: 2, days: 29},\r\n        {name: \"Mar\", num: 3, days: 31},\r\n        {name: \"Apr\", num: 4, days: 30},\r\n        {name: \"May\", num: 5, days: 31},\r\n        {name: \"Jun\", num: 6, days: 30},\r\n        {name: \"Jul\", num: 7, days: 31},\r\n        {name: \"Aug\", num: 8, days: 31},\r\n        {name: \"Sep\", num: 9, days: 30},\r\n        {name: \"Oct\", num: 10, days: 31},\r\n        {name: \"Nov\", num: 11, days: 30},\r\n        {name: \"Dec\", num: 12, days: 31}\r\n    ];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            idCount: 0,\r\n            inputYear: 2022,\r\n            inputMonth: \"Jan\",\r\n            inputDay: 1,\r\n            inputCategory: \"abc\",         // 1\r\n            inputLocation: \"soeb\",         // 2\r\n            inputIncome: \"123\",           // 3\r\n            inputExpense: \"423\",          // 4\r\n            inputDescription: \"dsafsafsd\",      // 5\r\n            inputNewCategory: \"\",      // 6\r\n        }\r\n    }\r\n\r\n    timeNow() {\r\n        var today = new Date();\r\n        var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        return date + \" \" + time;\r\n    }\r\n\r\n    onAddEntry = () => {\r\n        let monthNumeric = 1;\r\n        for (const month of this.monthsAndDays) {\r\n            if (month.name === this.state.inputMonth) {\r\n                monthNumeric = month.num;\r\n                break;\r\n            }\r\n        }\r\n        if (isNaN(this.state.inputIncome) || isNaN(this.state.inputExpense) ||\r\n            this.state.inputIncome.trim().length === 0 || this.state.inputExpense.trim().length === 0 ||\r\n            this.state.inputCategory.trim().length === 0 || this.state.inputLocation.trim().length === 0) {\r\n            return;\r\n        }\r\n        this.props.onAddEntry(new Entry(\r\n            this.state.idCount, \r\n            new Date(this.state.inputYear, monthNumeric, this.state.inputDay), \r\n            this.state.inputIncome, \r\n            this.state.inputExpense, \r\n            this.state.inputCategory.trim(), \r\n            this.state.inputLocation.trim(), \r\n            this.state.inputDescription.trim()));\r\n        this.setState({idCount: this.state.idCount + 1});\r\n    }\r\n\r\n    onAddCategory = () => {\r\n        if (this.state.inputNewCategory.length > 0) {\r\n            this.props.onAddCategory(this.state.inputNewCategory);\r\n        }\r\n    }\r\n\r\n    onClearForm = () => {\r\n        this.setState({\r\n            inputCategory: \"\",         \r\n            inputLocation: \"\",         \r\n            inputIncome: \"0\",           \r\n            inputExpense: \"0\",          \r\n            inputDescription: \"\",      \r\n        });\r\n    }\r\n\r\n    onClearCateogryForm = () => {\r\n        this.setState({\r\n            inputNewCategory: \"\"\r\n        });\r\n    }\r\n\r\n    updateInput(field, evt) {\r\n        const val = evt.target.value;\r\n        if (field === 1) \r\n            this.setState({inputCategory: val});\r\n        else if (field === 2) \r\n            this.setState({inputLocation: val});\r\n        else if (field === 3) \r\n            this.setState({inputIncome: val});\r\n        else if (field === 4) \r\n            this.setState({inputExpense: val});\r\n        else if (field === 5) \r\n            this.setState({inputDescription: val});\r\n        else if (field === 6)\r\n            this.setState({inputNewCategory: val});\r\n    }\r\n\r\n    renderOptions(options, keySuffix) {\r\n        if (options === null) {\r\n            return null;\r\n        }\r\n        return options.map((op) => {\r\n            return <option key={op + keySuffix} value={op}>{op}</option>;\r\n        });\r\n    }\r\n\r\n    renderYearOptions() {\r\n        const years = []\r\n        for (let i = 2021; i < 2030; i++) {\r\n            years.push(i);\r\n        }\r\n        return this.renderOptions(years, \"-add-page-year-option\");\r\n    }\r\n\r\n    renderMonthOptions() {\r\n        const months = [];\r\n        this.monthsAndDays.forEach(month => {\r\n            months.push(month.name);\r\n        });\r\n        return this.renderOptions(months, \"-add-page-month-option\");\r\n    }\r\n\r\n    renderDayOptions() {\r\n        const days = [];\r\n        for (const month of this.monthsAndDays) {\r\n            if (month.name === this.state.inputMonth) {\r\n                for (let i = 1; i <= month.days; i++) {\r\n                    days.push(i);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return this.renderOptions(days, \"-add-page-day-option\");\r\n    }\r\n\r\n    onChangeInputYear = (e) => {\r\n        const year = e.target.value;\r\n        this.setState({inputYear: year});\r\n    }\r\n\r\n    onChangeInputMonth =(e) => {\r\n        const month = e.target.value;\r\n        console.log(month);\r\n        this.setState({inputMonth: month});\r\n    }\r\n\r\n    onChangeInputDay =(e) => {\r\n        const day = e.target.value;\r\n        this.setState({inputDay: day});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AddPage-body\">\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Entry\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Date</div>\r\n                        <div className='AddPage-date-block'>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputYear}\r\n                                onChange={(e) => this.onChangeInputYear(e)}>\r\n                                {this.renderYearOptions()}\r\n                            </select>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputMonth}\r\n                                onChange={(e) => this.onChangeInputMonth(e)}>\r\n                                {this.renderMonthOptions()}\r\n                            </select>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputDay}\r\n                                onChange={(e) => this.onChangeInputDay(e)}>\r\n                                {this.renderDayOptions()}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputCategory}\r\n                            onChange={evt => this.updateInput(1, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Location</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputLocation}\r\n                            onChange={evt => this.updateInput(2, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Income</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputIncome}\r\n                            onChange={evt => this.updateInput(3, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Expense</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputExpense}\r\n                            onChange={evt => this.updateInput(4, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Description</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputDescription}\r\n                            onChange={evt => this.updateInput(5, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddEntry()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onClearForm()}>Clear</button>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Category\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\" \r\n                            value={this.state.inputNewCategory}\r\n                            onChange={evt => this.updateInput(6, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddCategory()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onClearCateogryForm()}>Clear</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPage;","import React from \"react\";\r\n\r\nclass GridCell extends React.Component {\r\n\r\n    static cellId = 0;\r\n    static newCellId() {\r\n        this.cellId++;\r\n        return this.cellId;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= {this.props.isDate ? \"grid-cell grid-cell-date\" : \"grid-cell\"}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridCell;","import React from \"react\";\r\nimport GridCell from \"./GridCell\";\r\nimport \"./Grid.css\"\r\n\r\nclass GridRow extends React.Component {\r\n\r\n    static rowId = 0;\r\n    static newRowId() {\r\n        this.rowId++;\r\n        return this.rowId;\r\n    }\r\n\r\n    renderCells(columnRow) {\r\n        return columnRow.map((val, i) => {\r\n            if (val === null) {\r\n                return <GridCell key={GridCell.newCellId()  + \"-cell\" } value={null} isDate={false} />;\r\n            } else {\r\n                if (i === 0) {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={true}/>;\r\n                } else {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={false}/>;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.isHeaderRow ? \"grid-row grid-header-row\": \"grid-row\" }>\r\n                {this.renderCells(this.props.rowContent)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridRow;","import React from \"react\";\r\nimport './HistoryPage.css'\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport GridRow from \"./GridRow\";\r\n\r\nclass HistoryPage extends React.Component {\r\n\r\n    monthsAndDays = [\r\n        {name: \"Jan\", num: 1, days: 31},\r\n        {name: \"Feb\", num: 2, days: 29},\r\n        {name: \"Mar\", num: 3, days: 31},\r\n        {name: \"Apr\", num: 4, days: 30},\r\n        {name: \"May\", num: 5, days: 31},\r\n        {name: \"Jun\", num: 6, days: 30},\r\n        {name: \"Jul\", num: 7, days: 31},\r\n        {name: \"Aug\", num: 8, days: 31},\r\n        {name: \"Sep\", num: 9, days: 30},\r\n        {name: \"Oct\", num: 10, days: 31},\r\n        {name: \"Nov\", num: 11, days: 30},\r\n        {name: \"Dec\", num: 12, days: 31}\r\n    ];\r\n\r\n    renderGrid(annualStatement) {\r\n        if (annualStatement === null) {\r\n            return;\r\n        }\r\n        const categories = annualStatement.categories;\r\n        const rows = [[\"Dates\"]];\r\n        for (const month of this.monthsAndDays) {\r\n            if (+month.num === +this.props.currentMonth) {\r\n                for (let i = 0; i < month.days; i++) {\r\n                    rows.push([`${month.name} ${(i + 1)}, ${this.props.currentAnnualStatement.year}`]);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return rows.map((date, i) => {\r\n            if (date[0] === \"Dates\") {\r\n                let headerRowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    headerRowContent.push([this.renderHeader(categoryName)]);\r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={headerRowContent} isHeaderRow={true}/>\r\n            } else {\r\n                let entries = this.props.currentAnnualStatement.getMonthEntries(this.props.currentMonth);\r\n                let rowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    rowContent.push([]);\r\n                    entries.forEach(entry => {\r\n                        if (entry.category === categoryName && entry.date.day === +i) {\r\n                            rowContent[rowContent.length - 1].push(this.renderEntry(entry));\r\n                        }\r\n                    });                \r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={rowContent} isHeaderRow={false}/>\r\n            }\r\n        })\r\n    }\r\n\r\n    renderAllEntries(entries) {\r\n        return entries.map((entry) => {\r\n            return this.renderEntry(entry);\r\n        });\r\n    }\r\n\r\n    renderHeader(text) {\r\n        return ( \r\n            <div key={`Grid-header-${text}`} className=\"HistoryPage-entry\">\r\n                <div className=\"History-page-entry-content\">\r\n                    <div className=\"HistoryPage-entry-delete-btn\" onClick={() => this.props.onDeleteCategory(text)}>&#215;</div>\r\n                    <div className=\"HistoryPage-entry-main\">\r\n                        {text}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEntry(entry) {\r\n        return (\r\n            <div key={entry.id} className=\"HistoryPage-entry\">\r\n                <div className=\"History-page-entry-content\">\r\n                    <div className=\"HistoryPage-entry-delete-btn\" onClick={() => this.props.onDeleteEntry(entry.id)}>&#215;</div>\r\n                    <div className=\"HistoryPage-entry-main\">\r\n                        <div>{entry.location}</div>\r\n                        <div><span className=\"income-indicator\">&#9650;</span>${entry.income}</div>\r\n                        <div><span className=\"expense-indicator\">&#9660;</span>${entry.expense}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"HistoryPage-entry-collapse\">\r\n                    {entry.description}\r\n                </div>\r\n            </div>   \r\n        );\r\n    }\r\n\r\n    renderSelectOption(options) {\r\n        if (options === null) {\r\n            return null;\r\n        }\r\n        return options.map((op) => {\r\n            return <option key={op + \"-history-view-option\"} value={op}>{op}</option>;\r\n        });\r\n    }\r\n\r\n    onChangeViewYear = (e) => {\r\n        const year = e.target.value;\r\n        this.props.onChangeViewYear(year);\r\n    }\r\n\r\n    onChangeViewMonth =(e) => {\r\n        const month = e.target.value;\r\n        for (const m of this.monthsAndDays) {\r\n            if (m.name === month) {\r\n                this.props.onChangeViewMonth(m.num);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    getCurrentYear() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.year;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getCurrentMonth() {\r\n        if (this.props.availableMonths !== null) {\r\n            let selectedMonth = this.props.availableMonths[0];\r\n            this.props.availableMonths.forEach(month => {\r\n                if (month === this.props.currentMonth) {\r\n                    selectedMonth = this.props.currentMonth;\r\n                    return;\r\n                }\r\n            });\r\n            return selectedMonth;\r\n        }\r\n        return \"\";\r\n    }\r\n    \r\n\r\n\r\n    numericMonthToNamed(months) {\r\n        if (months === null) {\r\n            return null;\r\n        }\r\n        const namedMonths = [];\r\n        months.forEach(m => {\r\n            namedMonths.push(this.monthsAndDays[m - 1].name);\r\n        });\r\n        return namedMonths;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"HistoryPage-body\">\r\n                <div className=\"HistoryPage-header-content\">\r\n                    <div className=\"HistoryPage-header-label\">History</div>\r\n                    <div className=\"HistoryPage-select-label\">Year</div>\r\n                    <select className=\"HistoryPage-header-select\" value={this.getCurrentYear()} \r\n                        onChange={(e) => this.onChangeViewYear(e)}>\r\n                        {this.renderSelectOption(this.props.availableYears)}\r\n                    </select>\r\n                    <div className=\"HistoryPage-select-label\">Month</div>\r\n                    <select className=\"HistoryPage-header-select\" \r\n                        value={this.props.currentMonth - 1 >= 0 && this.props.currentMonth - 1 < this.monthsAndDays.length ?\r\n                                 this.monthsAndDays[this.props.currentMonth - 1].name : \"\"}\r\n                         onChange={(e) => this.onChangeViewMonth(e)}>\r\n                        {this.renderSelectOption(this.numericMonthToNamed(this.props.availableMonths))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"HistoryPage-content\" data-simplebar data-simplebar-auto-hide=\"false\">\r\n                    <div className=\"HistoryPage-grid\">\r\n                            {this.renderGrid(this.props.currentAnnualStatement)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HistoryPage;","\r\nclass MonthStatement {\r\n    constructor(id, month) {\r\n        this.id = id;\r\n        this.month = month;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.id = statement.id;\r\n        this.month = statement.month;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyEntires = statement.monthlyEntires;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires.forEach(entry => {\r\n            this.totalIncome += +entry.income;\r\n            this.totalExpense += +entry.expense;\r\n        });\r\n    }\r\n\r\n    addEntry(entry) {\r\n        this.monthlyEntires.push(entry);\r\n        this.calculateTotal();\r\n    }\r\n\r\n    isStatementEmpty() {\r\n        return this.monthlyEntires.length === 0;\r\n    }\r\n\r\n    getCategoriesIncomeExpenseTotal() {\r\n        const totals = [];\r\n        this.monthlyEntires.forEach(entry => {\r\n            var added = false;\r\n            for (let i = 0; i < totals.length; i++) {\r\n                const t = totals[i];\r\n                if (t.category === entry.category) {\r\n                    t.income += +entry.income;\r\n                    t.expense += +entry.expense;\r\n                    totals[i] = t;\r\n                    added = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!added) {\r\n                totals.push({\r\n                    category: entry.category, \r\n                    income: +entry.income, \r\n                    expense: +entry.expense\r\n                });\r\n            }\r\n        });\r\n        return totals;\r\n    }\r\n\r\n    deleteEntry(entryId) {\r\n        this.monthlyEntires = this.monthlyEntires.filter((entry) => {\r\n            return entry.id !== entryId;\r\n        });\r\n        this.calculateTotal();\r\n    }\r\n\r\n    deleteEntryByCategory(categoryName) {\r\n        this.monthlyEntires = this.monthlyEntires.filter((entry) => {\r\n            return entry.category !== categoryName;\r\n        });\r\n        this.calculateTotal();\r\n    }\r\n}\r\n\r\nexport default MonthStatement;","import MonthStatement from \"./MonthStatement\";\r\n\r\nclass AnnualStatement {\r\n    constructor(year) {\r\n        this.year = year;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.year = statement.year;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = statement.categories;\r\n        for (let i = 0; i < this.monthlyStatements.length; i++) {\r\n            this.monthlyStatements[i].copy(statement.monthlyStatements[i]);\r\n        }\r\n    }\r\n\r\n    initEmptyMonthStatement() {\r\n        let statements = new Array(12);\r\n        for (let i = 0; i < statements.length; i++) {\r\n            statements[i] = new MonthStatement(i, +i + 1);\r\n        }\r\n        return statements;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements.forEach(statement => {\r\n            this.totalIncome += +statement.totalIncome;\r\n            this.totalExpense += +statement.totalExpense;\r\n        });\r\n    }\r\n\r\n    replaceMonthlyStatement(statement) {\r\n        this.monthlyStatements[statement.month - 1] = statement;\r\n        this.calculateTotal();\r\n    }\r\n\r\n    isIndexInMonthlyStatementRange(index) {\r\n        return index >= 0 && index < this.monthlyStatements.length;\r\n    }\r\n\r\n    addEntryToMonthStatement(month, entry) {\r\n        if (this.isIndexInMonthlyStatementRange(month - 1) && this.monthlyStatements[month - 1] != null) {\r\n            this.monthlyStatements[month - 1].addEntry(entry);\r\n        }\r\n        this.calculateTotal();\r\n    }\r\n\r\n    addCategory(category) {\r\n        if (this.categories.length > 0 && this.categories.includes(category)) {\r\n            return false;\r\n        }\r\n        this.categories.push(category);\r\n        return true;\r\n    }\r\n\r\n    getMonthTotalIncome(month) {\r\n        if (this.isIndexInMonthlyStatementRange(month - 1)) {\r\n            return this.monthlyStatements[month - 1].totalIncome;\r\n        }\r\n        return 0;\r\n    }\r\n    getMonthTotalExpense(month) {\r\n        if (this.isIndexInMonthlyStatementRange(month - 1)) {\r\n            return this.monthlyStatements[month - 1].totalExpense;\r\n        }\r\n        return 0;\r\n    }\r\n    getMonthEntries(month) {\r\n        if (this.isIndexInMonthlyStatementRange(month - 1)) {\r\n            return this.monthlyStatements[month - 1].monthlyEntires;\r\n        }\r\n        return 0;\r\n    }\r\n    getMonthStatement(month) {\r\n        if (this.isIndexInMonthlyStatementRange(month - 1)) {\r\n            return this.monthlyStatements[month - 1];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    deleteEntry(entryId, month) {\r\n        const monthStatement = this.getMonthStatement(month);\r\n        monthStatement.deleteEntry(entryId);\r\n        this.replaceMonthlyStatement(monthStatement);\r\n        this.calculateTotal();\r\n    }\r\n\r\n    deleteCategory(categoryName) {\r\n        this.categories = this.categories.filter((cat) => {\r\n            return cat !== categoryName;\r\n        });\r\n        this.monthlyStatements.forEach(statement => {\r\n            statement.deleteEntryByCategory(categoryName);\r\n        });\r\n        this.calculateTotal();\r\n    }\r\n\r\n    getAllCategoryTotals() {\r\n        const categoriesTotalMap = new Map();\r\n        this.monthlyStatements.forEach(statement => {\r\n            const catSubTotalArray = statement.getCategoriesIncomeExpenseTotal();\r\n            catSubTotalArray.forEach(entry => {\r\n                if (categoriesTotalMap.has(entry.category)) {\r\n                    const oldTotal = categoriesTotalMap.get(entry.category);\r\n                    const newTotalIncome = entry.income + oldTotal.income;\r\n                    const newTotalExpense = entry.expense + oldTotal.expense;\r\n                    categoriesTotalMap.set(entry.category, {income: newTotalIncome, expense: newTotalExpense});\r\n                } else {\r\n                    categoriesTotalMap.set(entry.category, {income: entry.income, expense: entry.expense});\r\n                }\r\n            });\r\n        });\r\n        return Array.from(categoriesTotalMap, ([category, totals]) => ({category, totals}));\r\n    }\r\n}\r\n\r\nexport default AnnualStatement;","import React from \"react\";\r\nimport SummaryPage from \"./SummaryPage\";\r\nimport './Dashboard.css'\r\nimport AddPage from \"./AddPage\";\r\nimport HistoryPage from \"./HistoryPage\";\r\nimport AnnualStatement from \"./AnnualStatement\";\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport { GoogleLogin, GoogleLogout } from \"react-google-login\";\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n    CLIENT_ID = '91993730445-4jjm5pf1kvja9m8r6b66uarvnqmdir1b.apps.googleusercontent.com';\r\n    editCount = 0;\r\n    saveIntervalId = setInterval(() => {\r\n        if (this.editCount > 0) {\r\n            if (this.editCount === 1) {\r\n                this.saveToDrive();\r\n                console.log(\"Saved to drive\");\r\n            }\r\n            --this.editCount;\r\n        }\r\n    }, 1000);\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            isSaving: false,\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        }\r\n    }\r\n    \r\n    incrementEditCount() {\r\n        if (this.editCount < 2) {\r\n            ++this.editCount;\r\n        }\r\n    }\r\n\r\n    getCurrentAnnualStatement() {\r\n        if (this.state.allAnnualStatements.length === 0) {\r\n            return null;\r\n        }\r\n        return this.state.allAnnualStatements[this.state.currentYearIndex];\r\n    }\r\n\r\n    setCurrentAnnualStatement(newStatement) {\r\n        let newAllAnnualStatement = this.state.allAnnualStatements;\r\n        newAllAnnualStatement[this.state.currentYearIndex] = newStatement;\r\n        this.setState({allAnnualStatements: newAllAnnualStatement});\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    addNewAnnualStatementWithEntry(entry) {\r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        const newAnnualStatement = new AnnualStatement(entry.date.year);\r\n        newAnnualStatement.addCategory(entry.category);\r\n        newAnnualStatement.addEntryToMonthStatement(entry.date.month, entry);\r\n        newAllAnnualStatements.push(newAnnualStatement);\r\n        const newCurrentYearIndex = newAllAnnualStatements.length - 1;\r\n        this.setState({allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: newCurrentYearIndex,\r\n            currentMonth: entry.date.month});\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    handleNewEntry = (entry) => {\r\n        if (this.getCurrentAnnualStatement() === null) {\r\n            this.addNewAnnualStatementWithEntry(entry);\r\n            return;\r\n        }\r\n\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        let annualStatementIndex = this.state.currentYearIndex;\r\n        if (entry.date.year !== newCurrentAnnualStatement.year) {\r\n            let yearDNE = true;\r\n            this.state.allAnnualStatements.forEach((statement, i) => {\r\n                if (statement.year === entry.date.year) {\r\n                    yearDNE = false;\r\n                    annualStatementIndex = i;\r\n                } \r\n            });\r\n            if (yearDNE) {\r\n                this.addNewAnnualStatementWithEntry(entry);\r\n                return;\r\n            } \r\n        } \r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        newAllAnnualStatements[annualStatementIndex].addCategory(entry.category);\r\n        newAllAnnualStatements[annualStatementIndex].addEntryToMonthStatement(entry.date.month, entry);\r\n        this.setState({\r\n            allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: annualStatementIndex,\r\n            currentMonth: entry.date.month\r\n        });\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    handleNewCategory = (c) => {\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (newCurrentAnnualStatement.addCategory(c)) {\r\n            this.setCurrentAnnualStatement(newCurrentAnnualStatement);\r\n        }\r\n    }\r\n\r\n    // to prevent history auto select if there are no entries\r\n    handleNoEntriesInMonth(currentAnnualStatement) {\r\n        if (currentAnnualStatement.getMonthEntries(this.state.currentMonth).length === 0) {\r\n            const availableMonths = this.getAvailableMonths();\r\n            if (availableMonths.length > 0) {\r\n                this.setState({currentMonth: availableMonths[0]});\r\n            } else {\r\n                this.setState({currentMonth: 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleDeleteEntry = (entryId) => {\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        currentAnnualStatement.deleteEntry(entryId, this.state.currentMonth);\r\n        this.setCurrentAnnualStatement(currentAnnualStatement);\r\n        this.handleNoEntriesInMonth(currentAnnualStatement);\r\n        this.incrementEditCount();\r\n    } \r\n\r\n    handleDeleteCategory = (categoryName) => {\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        currentAnnualStatement.deleteCategory(categoryName);\r\n        this.setCurrentAnnualStatement(currentAnnualStatement);\r\n        this.handleNoEntriesInMonth(currentAnnualStatement);\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    getAvailableYears() {\r\n        let years = [];\r\n        this.state.allAnnualStatements.forEach(statement => {\r\n            years.push(statement.year);\r\n        });\r\n        return years.sort();\r\n    }\r\n\r\n    getAvailableMonths() {\r\n        let month = [];\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (currentAnnualStatement == null) {\r\n            return null;\r\n        }\r\n        currentAnnualStatement.monthlyStatements.forEach(monthStatement => {\r\n            if (!monthStatement.isStatementEmpty()) {\r\n                month.push(monthStatement.month);\r\n            }\r\n        });\r\n        return month;\r\n    }\r\n\r\n    handleChangeViewYear = (year) => {\r\n        const allAnnualStatements = this.state.allAnnualStatements;\r\n        for(let i = 0; i < allAnnualStatements.length; ++i) {\r\n            if (+allAnnualStatements[i].year === +year) {\r\n                let firstAvailableMonth = 1;\r\n                allAnnualStatements[i].monthlyStatements.forEach(monthStatement => {\r\n                    if (!monthStatement.isStatementEmpty()) {\r\n                        firstAvailableMonth = monthStatement.month;\r\n                    }\r\n                });\r\n\r\n                this.setState({currentYearIndex: i, currentMonth: firstAvailableMonth});\r\n                this.incrementEditCount();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChangeViewMonth = (month) => {\r\n        this.setState({currentMonth: month});\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    handleDownloadData = async () => {\r\n        const json = JSON.stringify(this.state.allAnnualStatements, undefined, 2);\r\n        const blob = new Blob([json],{type:'application/json'});\r\n        const href = await URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = href;\r\n        link.download = \"mflow-user-data.json\";\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    successLoginGoogle = (response) => {\r\n        this.setState({\r\n            userEmail: response.profileObj.email,\r\n            userName: response.profileObj.name,\r\n            isSignedIn: true\r\n        });\r\n\r\n        fetch('/login', {\r\n            method: 'GET',\r\n            headers: {\r\n                accessToken: response.tokenObj.access_token\r\n            }\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log(data.message);\r\n                this.getDataFromDrive();\r\n            });\r\n    }\r\n\r\n    failureLoginGoogle = (response) => {\r\n        console.log(\"failed to login to google\");\r\n        console.log(response);\r\n    }\r\n\r\n    successLogoutGoogle = () => {\r\n        this.setState({\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        });\r\n        console.log(\"successfully logged out of google\");\r\n    }\r\n\r\n    saveToDrive = () => {\r\n        if (!this.state.isSignedIn) {\r\n            return;\r\n        }\r\n        this.setState({isSaving: true});\r\n        fetch(`/save`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            // add icon to show this in UI \r\n            console.log(data.message);\r\n            console.log(`Save Status: ${data.status ? \"Success\" : \"Failure\"}`);\r\n            this.setState({isSaving: false});\r\n        });\r\n    }\r\n\r\n    getDataFromDrive = () => {\r\n        fetch(`/get`)\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                // save file not found in GDrive\r\n                if (data.userData === null) {\r\n                    // Make a new save file \r\n                    this.saveToDrive();\r\n                    return;\r\n                }\r\n\r\n                const allAnnualStatements = [];\r\n                data.userData.allAnnualStatements.forEach(statement => {\r\n                    const newStatement = new AnnualStatement(statement.year);\r\n                    newStatement.copy(statement);\r\n                    allAnnualStatements.push(newStatement);\r\n                });\r\n\r\n                this.setState({\r\n                    currentMonth: data.userData.currentMonth,\r\n                    currentYearIndex: data.userData.currentYearIndex,\r\n                    allAnnualStatements: allAnnualStatements\r\n                });\r\n                console.log(data.message); \r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Dashboard-body\">\r\n                <div className=\"Dashboard-content\">\r\n                    <div className=\"Dashbaord-content-left\" >\r\n                        <div className=\"Dashboard-header\">\r\n                            <div className=\"Dashboard-header-label\">MFlow</div>\r\n                        </div>\r\n                        <div className=\"Dashboard-content-left-scrollabe\" data-simplebar>\r\n                            <div className=\"Dashboard-account-block\">\r\n                                <div className={`Dashboard-user-info ${!this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <div className=\"Dashboard-user-info-texts\">\r\n                                        <div>{this.state.userName}</div>\r\n                                        <div>{this.state.userEmail}</div>\r\n                                    </div>\r\n                                    <div className={`Dashboard-save-status-text ${!this.state.isSaving ?  \"Dashboard-disabled\" : \"\"}`}>\r\n                                        Saving to Google Drive...\r\n                                        </div>\r\n                                    <GoogleLogout \r\n                                        clientId={this.CLIENT_ID}\r\n                                        buttonText=\"Log out\"\r\n                                        onLogoutSuccess={this.successLogoutGoogle}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log out\r\n                                                </button>\r\n                                          )}/>\r\n                                </div>\r\n                                <div className={`Dashboard-google-login-wrapper ${this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <GoogleLogin \r\n                                        clientId={this.CLIENT_ID}\r\n                                        onSuccess={this.successLoginGoogle}\r\n                                        onFailure={this.failureLoginGoogle}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                        scope={'https://www.googleapis.com/auth/drive.appdata'}\r\n                                        isSignedIn={true}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log in with Google to save your data!\r\n                                            </button>\r\n                                          )}/>\r\n                                </div>\r\n                            </div>\r\n                            <SummaryPage currentAnnualStatement={this.getCurrentAnnualStatement()}\r\n                                        currentMonth={this.state.currentMonth} />\r\n                            <br/>\r\n                            <AddPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    onAddEntry={this.handleNewEntry}\r\n                                    onAddCategory={this.handleNewCategory}/>\r\n                            <br/>\r\n                            <button className=\"Dashboard-google-button Dashboard-download-button\"\r\n                                onClick={this.handleDownloadData}>\r\n                                Download JSON Data\r\n                            </button>\r\n                            <br/>\r\n                            <br/>\r\n                            <div className=\"Dashboard-credit\">Made for and by <a href=\"https://jaks024.github.io/\" target=\"_blank\">jaks024</a> with ❤️</div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"Dashboard-content-right\">\r\n                       <HistoryPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    currentMonth={this.state.currentMonth}\r\n                                    onChangeViewYear={this.handleChangeViewYear}\r\n                                    onChangeViewMonth={this.handleChangeViewMonth}\r\n                                    availableYears={this.getAvailableYears()}\r\n                                    availableMonths={this.getAvailableMonths()}\r\n                                    onDeleteEntry={this.handleDeleteEntry}\r\n                                    onDeleteCategory={this.handleDeleteCategory}/>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Dashboard;","import './App.css';\r\nimport Dashboard from './Dashboard.js';\r\nimport React from 'react';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-body\">\r\n        <Dashboard />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}