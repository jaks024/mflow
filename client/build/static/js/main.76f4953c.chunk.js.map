{"version":3,"sources":["SummaryPage.js","Entry.js","Date.js","AddPage.js","GridCell.js","GridRow.js","HistoryPage.js","MonthStatement.js","AnnualStatement.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["SummaryPage","this","props","currentAnnualStatement","getMonthTotalIncome","currentMonth","toFixed","getMonthTotalExpense","totalIncome","totalExpense","getMonthStatement","getCategoriesIncomeExpenseTotal","map","entry","key","category","className","income","expense","renderCategoryTotals","getAnnualTotalIncome","getAnnualTotalExpense","React","Component","Entry","id","date","location","description","Date","year","month","day","AddPage","monthsAndDays","name","num","days","onAddEntry","monthNumeric","state","inputMonth","console","log","inputDay","idCount","inputYear","inputIncome","inputExpense","inputCategory","inputLocation","inputDescription","setState","onAddCategory","inputNewCategory","length","onClearForm","onClearCateogryForm","onChangeInputYear","e","target","value","onChangeInputMonth","onChangeInputDay","today","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","field","evt","val","options","keySuffix","op","years","i","push","renderOptions","months","forEach","onChange","renderYearOptions","renderMonthOptions","renderDayOptions","inputMode","updateInput","onClick","GridCell","isDate","cellId","GridRow","columnRow","newCellId","isHeaderRow","renderCells","rowContent","rowId","HistoryPage","onChangeViewYear","onChangeViewMonth","m","annualStatement","categories","rows","headerRowContent","categoryName","newRowId","entries","getMonthEntries","renderEntry","availableMonths","selectedMonth","namedMonths","getCurrentYear","renderSelectOption","availableYears","numericMonthToNamed","data-simplebar","data-simplebar-auto-hide","renderGrid","MonthStatement","monthlyEntires","statement","calculateTotal","totals","added","t","AnnualStatement","monthlyStatements","initEmptyMonthStatement","copy","statements","Array","addEntry","includes","Dashboard","CLIENT_ID","ClickCount","saveIntervalId","setInterval","saveToDrive","handleNewEntry","getCurrentAnnualStatement","newCurrentAnnualStatement","annualStatementIndex","currentYearIndex","yearDNE","allAnnualStatements","addNewAnnualStatementWithEntry","newAllAnnualStatements","addCategory","addEntryToMonthStatement","incrementClickCount","handleNewCategory","c","setCurrentAnnualStatement","handleChangeViewYear","firstAvailableMonth","monthStatement","isStatementEmpty","handleChangeViewMonth","successLoginGoogle","response","userEmail","profileObj","email","userName","isSignedIn","fetch","method","headers","accessToken","tokenObj","access_token","then","res","json","data","message","getDataFromDrive","failureLoginGoogle","successLogoutGoogle","isSaving","body","JSON","stringify","status","userData","newStatement","newAllAnnualStatement","newAnnualStatement","newCurrentYearIndex","sort","clientId","buttonText","onLogoutSuccess","render","renderProps","disabled","onSuccess","onFailure","cookiePolicy","scope","getAvailableYears","getAvailableMonths","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76f4953c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SummaryPage.css'\r\n\r\nclass SummaryPage extends React.Component {\r\n\r\n    getMonthTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalIncome(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getMonthTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalExpense(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalIncome.toFixed(2)\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalExpense.toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    renderCategoryTotals() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            const monthStatement = this.props.currentAnnualStatement.getMonthStatement(this.props.currentMonth);\r\n            const categoriesTotal = monthStatement.getCategoriesIncomeExpenseTotal();\r\n            return categoriesTotal.map((entry) => {\r\n                return <div key={entry.category + \"-summary-subtotal-category-name\"} className=\"SummaryPage-income-expense-category\">\r\n                        {entry.category}: \r\n                        <span className=\"income-indicator\">&#9650;</span> ${entry.income} \r\n                        <span className=\"expense-indicator\">&#9660;</span> ${entry.expense} \r\n                    </div>\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SummaryPage-body\">\r\n                <div className=\"SummaryPage-header-label SummaryPage-main-header-label\">Summary</div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Month</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getMonthTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getMonthTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {this.renderCategoryTotals()}\r\n                </div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Year</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getAnnualTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getAnnualTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SummaryPage;","class Entry {\r\n    constructor(id, date, income, expense, category, location, description) {\r\n        this.id = id;\r\n        this.date = date;\r\n        this.income = income;\r\n        this.expense = expense;\r\n        this.category = category;\r\n        this.location = location;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport default Entry;","class Date {\r\n    constructor(year, month, day) {\r\n        this.year = +year;\r\n        this.month = +month;\r\n        this.day = +day;\r\n    }\r\n\r\n    equal(date) {\r\n        return this.year === date.year && this.month === date.month && this.day === date.day;\r\n    }\r\n}\r\n\r\nexport default Date;","import React from 'react';\r\nimport './AddPage.css'\r\nimport Entry from './Entry';\r\nimport Date from './Date';\r\n\r\nclass AddPage extends React.Component {\r\n\r\n    monthsAndDays = [\r\n        {name: \"Jan\", num: 1, days: 31},\r\n        {name: \"Feb\", num: 2, days: 29},\r\n        {name: \"Mar\", num: 3, days: 31},\r\n        {name: \"Apr\", num: 4, days: 30},\r\n        {name: \"May\", num: 5, days: 31},\r\n        {name: \"Jun\", num: 6, days: 30},\r\n        {name: \"Jul\", num: 7, days: 31},\r\n        {name: \"Aug\", num: 8, days: 31},\r\n        {name: \"Sep\", num: 9, days: 30},\r\n        {name: \"Oct\", num: 10, days: 31},\r\n        {name: \"Nov\", num: 11, days: 30},\r\n        {name: \"Dec\", num: 12, days: 31}\r\n    ];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            idCount: 0,\r\n            inputYear: 2022,\r\n            inputMonth: \"Jan\",\r\n            inputDay: 1,\r\n            inputCategory: \"abc\",         // 1\r\n            inputLocation: \"soeb\",         // 2\r\n            inputIncome: \"123\",           // 3\r\n            inputExpense: \"423\",          // 4\r\n            inputDescription: \"dsafsafsd\",      // 5\r\n            inputNewCategory: \"\",      // 6\r\n        }\r\n    }\r\n\r\n    timeNow() {\r\n        var today = new Date();\r\n        var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        return date + \" \" + time;\r\n    }\r\n\r\n    onAddEntry = () => {\r\n        let monthNumeric = 1;\r\n        for (const month of this.monthsAndDays) {\r\n            if (month.name === this.state.inputMonth) {\r\n                monthNumeric = month.num;\r\n                break;\r\n            }\r\n        }\r\n        console.log(this.state.inputDay);\r\n        this.props.onAddEntry(new Entry(\r\n            this.state.idCount, \r\n            new Date(this.state.inputYear, monthNumeric, this.state.inputDay), \r\n            this.state.inputIncome, \r\n            this.state.inputExpense, \r\n            this.state.inputCategory, \r\n            this.state.inputLocation, \r\n            this.state.inputDescription));\r\n        this.setState({idCount: this.state.idCount + 1});\r\n    }\r\n\r\n    onAddCategory = () => {\r\n        if (this.state.inputNewCategory.length > 0) {\r\n            this.props.onAddCategory(this.state.inputNewCategory);\r\n        }\r\n    }\r\n\r\n    onClearForm = () => {\r\n        this.setState({\r\n            inputCategory: \"\",         \r\n            inputLocation: \"\",         \r\n            inputIncome: \"0\",           \r\n            inputExpense: \"0\",          \r\n            inputDescription: \"\",      \r\n        });\r\n    }\r\n\r\n    onClearCateogryForm = () => {\r\n        this.setState({\r\n            inputNewCategory: \"\"\r\n        });\r\n    }\r\n\r\n    updateInput(field, evt) {\r\n        const val = evt.target.value;\r\n        if (field === 1) \r\n            this.setState({inputCategory: val});\r\n        else if (field === 2) \r\n            this.setState({inputLocation: val});\r\n        else if (field === 3) \r\n            this.setState({inputIncome: val});\r\n        else if (field === 4) \r\n            this.setState({inputExpense: val});\r\n        else if (field === 5) \r\n            this.setState({inputDescription: val});\r\n        else if (field === 6)\r\n            this.setState({inputNewCategory: val});\r\n    }\r\n\r\n    renderOptions(options, keySuffix) {\r\n        if (options === null) {\r\n            return null;\r\n        }\r\n        return options.map((op) => {\r\n            return <option key={op + keySuffix} value={op}>{op}</option>;\r\n        });\r\n    }\r\n\r\n    renderYearOptions() {\r\n        const years = []\r\n        for (let i = 2021; i < 2030; i++) {\r\n            years.push(i);\r\n        }\r\n        return this.renderOptions(years, \"-add-page-year-option\");\r\n    }\r\n\r\n    renderMonthOptions() {\r\n        const months = [];\r\n        this.monthsAndDays.forEach(month => {\r\n            months.push(month.name);\r\n        });\r\n        return this.renderOptions(months, \"-add-page-month-option\");\r\n    }\r\n\r\n    renderDayOptions() {\r\n        const days = [];\r\n        for (const month of this.monthsAndDays) {\r\n            if (month.name === this.state.inputMonth) {\r\n                for (let i = 1; i <= month.days; i++) {\r\n                    days.push(i);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return this.renderOptions(days, \"-add-page-day-option\");\r\n    }\r\n\r\n    onChangeInputYear = (e) => {\r\n        const year = e.target.value;\r\n        this.setState({inputYear: year});\r\n    }\r\n\r\n    onChangeInputMonth =(e) => {\r\n        const month = e.target.value;\r\n        console.log(month);\r\n        this.setState({inputMonth: month});\r\n    }\r\n\r\n    onChangeInputDay =(e) => {\r\n        const day = e.target.value;\r\n        this.setState({inputDay: day});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AddPage-body\">\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Entry\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Date</div>\r\n                        <div className='AddPage-date-block'>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputYear}\r\n                                onChange={(e) => this.onChangeInputYear(e)}>\r\n                                {this.renderYearOptions()}\r\n                            </select>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputMonth}\r\n                                onChange={(e) => this.onChangeInputMonth(e)}>\r\n                                {this.renderMonthOptions()}\r\n                            </select>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputDay}\r\n                                onChange={(e) => this.onChangeInputDay(e)}>\r\n                                {this.renderDayOptions()}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputCategory}\r\n                            onChange={evt => this.updateInput(1, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Location</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputLocation}\r\n                            onChange={evt => this.updateInput(2, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Income</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputIncome}\r\n                            onChange={evt => this.updateInput(3, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Expense</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputExpense}\r\n                            onChange={evt => this.updateInput(4, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Description</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputDescription}\r\n                            onChange={evt => this.updateInput(5, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddEntry()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onClearForm()}>Clear</button>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Category\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\" \r\n                            value={this.state.inputNewCategory}\r\n                            onChange={evt => this.updateInput(6, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddCategory()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onClearCateogryForm()}>Clear</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPage;","import React from \"react\";\r\n\r\nclass GridCell extends React.Component {\r\n\r\n    static cellId = 0;\r\n    static newCellId() {\r\n        this.cellId++;\r\n        return this.cellId;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= {this.props.isDate ? \"grid-cell grid-cell-date\" : \"grid-cell\"}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridCell;","import React from \"react\";\r\nimport GridCell from \"./GridCell\";\r\nimport \"./Grid.css\"\r\n\r\nclass GridRow extends React.Component {\r\n\r\n    static rowId = 0;\r\n    static newRowId() {\r\n        this.rowId++;\r\n        return this.rowId;\r\n    }\r\n\r\n    renderCells(columnRow) {\r\n        return columnRow.map((val, i) => {\r\n            if (val === null) {\r\n                return <GridCell key={GridCell.newCellId()  + \"-cell\" } value={null} isDate={false} />;\r\n            } else {\r\n                if (i === 0) {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={true}/>;\r\n                } else {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={false}/>;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.isHeaderRow ? \"grid-row grid-header-row\": \"grid-row\" }>\r\n                {this.renderCells(this.props.rowContent)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridRow;","import React from \"react\";\r\nimport './HistoryPage.css'\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport GridRow from \"./GridRow\";\r\n\r\nclass HistoryPage extends React.Component {\r\n\r\n    monthsAndDays = [\r\n        {name: \"Jan\", num: 1, days: 31},\r\n        {name: \"Feb\", num: 2, days: 29},\r\n        {name: \"Mar\", num: 3, days: 31},\r\n        {name: \"Apr\", num: 4, days: 30},\r\n        {name: \"May\", num: 5, days: 31},\r\n        {name: \"Jun\", num: 6, days: 30},\r\n        {name: \"Jul\", num: 7, days: 31},\r\n        {name: \"Aug\", num: 8, days: 31},\r\n        {name: \"Sep\", num: 9, days: 30},\r\n        {name: \"Oct\", num: 10, days: 31},\r\n        {name: \"Nov\", num: 11, days: 30},\r\n        {name: \"Dec\", num: 12, days: 31}\r\n    ];\r\n\r\n    renderGrid(annualStatement) {\r\n        if (annualStatement === null) {\r\n            return;\r\n        }\r\n        const categories = annualStatement.categories;\r\n        const rows = [[\"Dates\"]];\r\n        for (const month of this.monthsAndDays) {\r\n            if (+month.num === +this.props.currentMonth) {\r\n                for (let i = 0; i < month.days; i++) {\r\n                    rows.push([`${month.name} ${(i + 1)}, ${this.props.currentAnnualStatement.year}`]);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return rows.map((date, i) => {\r\n            if (date[0] === \"Dates\") {\r\n                let headerRowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    headerRowContent.push([categoryName]);\r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={headerRowContent} isHeaderRow={true}/>\r\n            } else {\r\n                let entries = this.props.currentAnnualStatement.getMonthEntries(this.props.currentMonth);\r\n                let rowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    rowContent.push([]);\r\n                    entries.forEach(entry => {\r\n                        if (entry.category === categoryName && entry.date.day === +i) {\r\n                            rowContent[rowContent.length - 1].push(this.renderEntry(entry));\r\n                        }\r\n                    });                \r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={rowContent} isHeaderRow={false}/>\r\n            }\r\n        })\r\n    }\r\n\r\n    renderAllEntries(entries) {\r\n        return entries.map((entry) => {\r\n            return this.renderEntry(entry);\r\n        });\r\n    }\r\n\r\n    renderEntry(entry) {\r\n        return (\r\n            <div key={entry.id} className=\"HistoryPage-entry\">\r\n                <div className=\"HistoryPage-entry-main\">\r\n                    <div>{entry.location}</div>\r\n                    <div><span className=\"income-indicator\">&#9650;</span>${entry.income}</div>\r\n                    <div><span className=\"expense-indicator\">&#9660;</span>${entry.expense}</div>\r\n                </div>\r\n                <div className=\"HistoryPage-entry-collapse\">\r\n                    {entry.description}\r\n                </div>\r\n            </div>   \r\n        );\r\n    }\r\n\r\n    renderSelectOption(options) {\r\n        if (options === null) {\r\n            return null;\r\n        }\r\n        return options.map((op) => {\r\n            return <option key={op + \"-history-view-option\"} value={op}>{op}</option>;\r\n        });\r\n    }\r\n\r\n    onChangeViewYear = (e) => {\r\n        const year = e.target.value;\r\n        this.props.onChangeViewYear(year);\r\n    }\r\n\r\n    onChangeViewMonth =(e) => {\r\n        const month = e.target.value;\r\n        for (const m of this.monthsAndDays) {\r\n            if (m.name === month) {\r\n                this.props.onChangeViewMonth(m.num);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    getCurrentYear() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.year;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getCurrentMonth() {\r\n        if (this.props.availableMonths !== null) {\r\n            let selectedMonth = this.props.availableMonths[0];\r\n            this.props.availableMonths.forEach(month => {\r\n                if (month === this.props.currentMonth) {\r\n                    selectedMonth = this.props.currentMonth;\r\n                    return;\r\n                }\r\n            });\r\n            return selectedMonth;\r\n        }\r\n        return \"\";\r\n    }\r\n    \r\n\r\n\r\n    numericMonthToNamed(months) {\r\n        if (months === null) {\r\n            return null;\r\n        }\r\n        const namedMonths = [];\r\n        months.forEach(m => {\r\n            namedMonths.push(this.monthsAndDays[m - 1].name);\r\n        });\r\n        return namedMonths;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"HistoryPage-body\">\r\n                <div className=\"HistoryPage-header-content\">\r\n                    <div className=\"HistoryPage-header-label\">History</div>\r\n                    <div className=\"HistoryPage-select-label\">Year</div>\r\n                    <select className=\"HistoryPage-header-select\" value={this.getCurrentYear()} \r\n                        onChange={(e) => this.onChangeViewYear(e)}>\r\n                        {this.renderSelectOption(this.props.availableYears)}\r\n                    </select>\r\n                    <div className=\"HistoryPage-select-label\">Month</div>\r\n                    <select className=\"HistoryPage-header-select\" value={this.monthsAndDays[this.props.currentMonth - 1].name}\r\n                         onChange={(e) => this.onChangeViewMonth(e)}>\r\n                        {this.renderSelectOption(this.numericMonthToNamed(this.props.availableMonths))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"HistoryPage-content\" data-simplebar data-simplebar-auto-hide=\"false\">\r\n                    <div className=\"HistoryPage-grid\">\r\n                            {this.renderGrid(this.props.currentAnnualStatement)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HistoryPage;","\r\nclass MonthStatement {\r\n    constructor(id, month) {\r\n        this.id = id;\r\n        this.month = month;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.id = statement.id;\r\n        this.month = statement.month;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyEntires = statement.monthlyEntires;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires.forEach(entry => {\r\n            this.totalIncome += +entry.income;\r\n            this.totalExpense += +entry.expense;\r\n        });\r\n    }\r\n\r\n    addEntry(entry) {\r\n        this.monthlyEntires.push(entry);\r\n        this.calculateTotal();\r\n    }\r\n\r\n    isStatementEmpty() {\r\n        return this.monthlyEntires.length === 0;\r\n    }\r\n\r\n    getCategoriesIncomeExpenseTotal() {\r\n        const totals = [];\r\n        this.monthlyEntires.forEach(entry => {\r\n            var added = false;\r\n            for (let i = 0; i < totals.length; i++) {\r\n                const t = totals[i];\r\n                if (t.category === entry.category) {\r\n                    t.income += +entry.income;\r\n                    t.expense += +entry.expense;\r\n                    totals[i] = t;\r\n                    added = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!added) {\r\n                totals.push({\r\n                    category: entry.category, \r\n                    income: +entry.income, \r\n                    expense: +entry.expense\r\n                });\r\n            }\r\n        });\r\n        return totals;\r\n    }\r\n}\r\n\r\nexport default MonthStatement;","import MonthStatement from \"./MonthStatement\";\r\n\r\nclass AnnualStatement {\r\n    constructor(year) {\r\n        this.year = year;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.year = statement.year;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = statement.categories;\r\n        for (let i = 0; i < this.monthlyStatements.length; i++) {\r\n            this.monthlyStatements[i].copy(statement.monthlyStatements[i]);\r\n        }\r\n    }\r\n\r\n    initEmptyMonthStatement() {\r\n        let statements = new Array(12);\r\n        for (let i = 0; i < statements.length; i++) {\r\n            statements[i] = new MonthStatement(i, +i + 1);\r\n        }\r\n        return statements;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements.forEach(statement => {\r\n            this.totalIncome += +statement.totalIncome;\r\n            this.totalExpense += +statement.totalExpense;\r\n        });\r\n    }\r\n\r\n    replaceMonthlyStatement(statement) {\r\n        this.monthlyStatements[statement.month - 1] = statement;\r\n        this.calculateTotal();\r\n    }\r\n\r\n    addEntryToMonthStatement(month, entry) {\r\n        if (this.monthlyStatements[month - 1] != null) {\r\n            this.monthlyStatements[month - 1].addEntry(entry);\r\n        }\r\n        this.calculateTotal();\r\n    }\r\n\r\n    addCategory(category) {\r\n        console.log(this.categories);\r\n        if (this.categories.length > 0 && this.categories.includes(category)) {\r\n            return false;\r\n        }\r\n        this.categories.push(category);\r\n        return true;\r\n    }\r\n\r\n    getMonthTotalIncome(month) {\r\n        return this.monthlyStatements[month - 1].totalIncome;\r\n    }\r\n    getMonthTotalExpense(month) {\r\n        return this.monthlyStatements[month - 1].totalExpense;\r\n    }\r\n    getMonthEntries(month) {\r\n        return this.monthlyStatements[month - 1].monthlyEntires;\r\n    }\r\n    getMonthStatement(month) {\r\n        return this.monthlyStatements[month - 1];\r\n    }\r\n}\r\n\r\nexport default AnnualStatement;","import React from \"react\";\r\nimport SummaryPage from \"./SummaryPage\";\r\nimport './Dashboard.css'\r\nimport AddPage from \"./AddPage\";\r\nimport HistoryPage from \"./HistoryPage\";\r\nimport AnnualStatement from \"./AnnualStatement\";\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport { GoogleLogin, GoogleLogout } from \"react-google-login\";\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n    CLIENT_ID = '91993730445-4jjm5pf1kvja9m8r6b66uarvnqmdir1b.apps.googleusercontent.com';\r\n    ClickCount = 0;\r\n    saveIntervalId = setInterval(() => {\r\n        if (this.ClickCount > 0) {\r\n            if (this.ClickCount === 1) {\r\n                this.saveToDrive();\r\n                console.log(\"Saved to drive\");\r\n            }\r\n            --this.ClickCount;\r\n        }\r\n    }, 1000);\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            isSaving: false,\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        }\r\n    }\r\n    \r\n    incrementClickCount() {\r\n        if (this.ClickCount < 2) {\r\n            ++this.ClickCount;\r\n        }\r\n    }\r\n\r\n    getCurrentAnnualStatement() {\r\n        if (this.state.allAnnualStatements.length === 0) {\r\n            return null;\r\n        }\r\n        return this.state.allAnnualStatements[this.state.currentYearIndex];\r\n    }\r\n\r\n    setCurrentAnnualStatement(newStatement) {\r\n        let newAllAnnualStatement = this.state.allAnnualStatements;\r\n        newAllAnnualStatement[this.state.currentYearIndex] = newStatement;\r\n        this.setState({allAnnualStatements: newAllAnnualStatement});\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    addNewAnnualStatementWithEntry(entry) {\r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        const newAnnualStatement = new AnnualStatement(entry.date.year);\r\n        newAnnualStatement.addCategory(entry.category);\r\n        newAnnualStatement.addEntryToMonthStatement(entry.date.month, entry);\r\n        newAllAnnualStatements.push(newAnnualStatement);\r\n        const newCurrentYearIndex = newAllAnnualStatements.length - 1;\r\n        this.setState({allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: newCurrentYearIndex,\r\n            currentMonth: entry.date.month});\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    handleNewEntry = (entry) => {\r\n        if (this.getCurrentAnnualStatement() === null) {\r\n            this.addNewAnnualStatementWithEntry(entry);\r\n            return;\r\n        }\r\n\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        let annualStatementIndex = this.state.currentYearIndex;\r\n        if (entry.date.year !== newCurrentAnnualStatement.year) {\r\n            let yearDNE = true;\r\n            this.state.allAnnualStatements.forEach((statement, i) => {\r\n                if (statement.year === entry.date.year) {\r\n                    yearDNE = false;\r\n                    annualStatementIndex = i;\r\n                } \r\n            });\r\n            if (yearDNE) {\r\n                this.addNewAnnualStatementWithEntry(entry);\r\n                return;\r\n            } \r\n        } \r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        newAllAnnualStatements[annualStatementIndex].addCategory(entry.category);\r\n        newAllAnnualStatements[annualStatementIndex].addEntryToMonthStatement(entry.date.month, entry);\r\n        this.setState({\r\n            allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: annualStatementIndex,\r\n            currentMonth: entry.date.month\r\n        });\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    handleNewCategory = (c) => {\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (newCurrentAnnualStatement.addCategory(c)) {\r\n            this.setCurrentAnnualStatement(newCurrentAnnualStatement);\r\n        }\r\n    }\r\n\r\n    getAvailableYears() {\r\n        let years = [];\r\n        this.state.allAnnualStatements.forEach(statement => {\r\n            years.push(statement.year);\r\n        });\r\n        return years.sort();\r\n    }\r\n\r\n    getAvailableMonths() {\r\n        let month = [];\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (currentAnnualStatement == null) {\r\n            return null;\r\n        }\r\n        currentAnnualStatement.monthlyStatements.forEach(monthStatement => {\r\n            if (!monthStatement.isStatementEmpty()) {\r\n                month.push(monthStatement.month);\r\n            }\r\n        });\r\n        return month;\r\n    }\r\n\r\n    handleChangeViewYear = (year) => {\r\n        const allAnnualStatements = this.state.allAnnualStatements;\r\n        for(let i = 0; i < allAnnualStatements.length; ++i) {\r\n            if (+allAnnualStatements[i].year === +year) {\r\n                let firstAvailableMonth = -1;\r\n                allAnnualStatements[i].monthlyStatements.forEach(monthStatement => {\r\n                    if (!monthStatement.isStatementEmpty()) {\r\n                        firstAvailableMonth = monthStatement.month;\r\n                    }\r\n                });\r\n\r\n                this.setState({currentYearIndex: i, currentMonth: firstAvailableMonth});\r\n                this.incrementClickCount();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChangeViewMonth = (month) => {\r\n        this.setState({currentMonth: month});\r\n        this.incrementClickCount();\r\n    }\r\n\r\n    successLoginGoogle = (response) => {\r\n        this.setState({\r\n            userEmail: response.profileObj.email,\r\n            userName: response.profileObj.name,\r\n            isSignedIn: true\r\n        });\r\n\r\n        fetch('/login', {\r\n            method: 'GET',\r\n            headers: {\r\n                accessToken: response.tokenObj.access_token\r\n            }\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log(data.message);\r\n                this.getDataFromDrive();\r\n            });\r\n    }\r\n\r\n    failureLoginGoogle = (response) => {\r\n        console.log(\"failed to login to google\");\r\n        console.log(response);\r\n    }\r\n\r\n    successLogoutGoogle = () => {\r\n        this.setState({\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        });\r\n        console.log(\"successfully logged out of google\");\r\n    }\r\n\r\n    saveToDrive = () => {\r\n        if (!this.state.isSignedIn) {\r\n            return;\r\n        }\r\n        this.setState({isSaving: true});\r\n        fetch(`/save`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            // add icon to show this in UI \r\n            console.log(data.message);\r\n            console.log(`Save Status: ${data.status ? \"Success\" : \"Failure\"}`);\r\n            this.setState({isSaving: false});\r\n        });\r\n    }\r\n\r\n    getDataFromDrive = () => {\r\n        fetch(`/get`)\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                // save file not found in GDrive\r\n                if (data.userData === null) {\r\n                    // Make a new save file \r\n                    this.saveToDrive();\r\n                    return;\r\n                }\r\n\r\n                const allAnnualStatements = [];\r\n                data.userData.allAnnualStatements.forEach(statement => {\r\n                    const newStatement = new AnnualStatement(statement.year);\r\n                    newStatement.copy(statement);\r\n                    allAnnualStatements.push(newStatement);\r\n                });\r\n\r\n                this.setState({\r\n                    currentMonth: data.userData.currentMonth,\r\n                    currentYearIndex: data.userData.currentYearIndex,\r\n                    allAnnualStatements: allAnnualStatements\r\n                });\r\n                console.log(data.message); \r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Dashboard-body\">\r\n                <div className=\"Dashboard-content\">\r\n                    <div className=\"Dashbaord-content-left\" >\r\n                        <div className=\"Dashboard-header\">\r\n                            <div className=\"Dashboard-header-label\">MFlow</div>\r\n                        </div>\r\n                        <div className=\"Dashboard-content-left-scrollabe\" data-simplebar>\r\n                            <div className=\"Dashboard-account-block\">\r\n                                <div className={`Dashboard-user-info ${!this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <div className=\"Dashboard-user-info-texts\">\r\n                                        <div>{this.state.userName}</div>\r\n                                        <div>{this.state.userEmail}</div>\r\n                                    </div>\r\n                                    <div className={`Dashboard-save-status-text ${!this.state.isSaving ?  \"Dashboard-disabled\" : \"\"}`}>\r\n                                        Saving to Google Drive...\r\n                                        </div>\r\n                                    <GoogleLogout \r\n                                        clientId={this.CLIENT_ID}\r\n                                        buttonText=\"Log out\"\r\n                                        onLogoutSuccess={this.successLogoutGoogle}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log out\r\n                                                </button>\r\n                                          )}/>\r\n                                </div>\r\n                                <div className={`Dashboard-google-login-wrapper ${this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <GoogleLogin \r\n                                        clientId={this.CLIENT_ID}\r\n                                        onSuccess={this.successLoginGoogle}\r\n                                        onFailure={this.failureLoginGoogle}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                        scope={'https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.appdata'}\r\n                                        isSignedIn={true}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log in with Google to save your data!\r\n                                            </button>\r\n                                          )}/>\r\n                                </div>\r\n                            </div>\r\n                            <SummaryPage currentAnnualStatement={this.getCurrentAnnualStatement()}\r\n                                        currentMonth={this.state.currentMonth} />\r\n                            <br/>\r\n                            <AddPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    onAddEntry={this.handleNewEntry}\r\n                                    onAddCategory={this.handleNewCategory}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"Dashboard-content-right\">\r\n                       <HistoryPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    currentMonth={this.state.currentMonth}\r\n                                    onChangeViewYear={this.handleChangeViewYear}\r\n                                    onChangeViewMonth={this.handleChangeViewMonth}\r\n                                    availableYears={this.getAvailableYears()}\r\n                                    availableMonths={this.getAvailableMonths()}/>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Dashboard;","import './App.css';\r\nimport Dashboard from './Dashboard.js';\r\nimport React from 'react';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-body\">\r\n        <Dashboard />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}