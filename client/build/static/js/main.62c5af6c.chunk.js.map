{"version":3,"sources":["SummaryPage.js","Entry.js","Date.js","AddPage.js","GridCell.js","GridRow.js","HistoryPage.js","MonthStatement.js","AnnualStatement.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["SummaryPage","this","props","currentAnnualStatement","getMonthTotalIncome","currentMonth","toFixed","getMonthTotalExpense","totalIncome","totalExpense","getMonthStatement","getCategoriesIncomeExpenseTotal","map","entry","key","category","className","income","expense","getAllCategoryTotals","totals","renderMonthCategoryTotals","getAnnualTotalIncome","getAnnualTotalExpense","renderYearCategoryTotals","React","Component","Entry","id","date","location","description","Date","year","month","day","AddPage","monthsAndDays","name","num","days","onAddEntry","monthNumeric","state","inputMonth","isNaN","inputIncome","inputExpense","length","inputCategory","inputLocation","idCount","inputYear","inputDay","inputDescription","setState","onAddCategory","inputNewCategory","onClearForm","onClearCateogryForm","onChangeInputYear","e","target","value","onChangeInputMonth","console","log","onChangeInputDay","today","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","field","evt","val","trim","options","keySuffix","op","years","i","push","renderOptions","months","forEach","onChange","renderYearOptions","renderMonthOptions","renderDayOptions","inputMode","updateInput","onClick","GridCell","isDate","cellId","GridRow","columnRow","newCellId","isHeaderRow","renderCells","rowContent","rowId","HistoryPage","onChangeViewYear","onChangeViewMonth","m","annualStatement","categories","rows","headerRowContent","categoryName","renderHeader","newRowId","entries","getMonthEntries","renderEntry","text","onDeleteCategory","onDeleteEntry","availableMonths","selectedMonth","namedMonths","getCurrentYear","renderSelectOption","availableYears","numericMonthToNamed","data-simplebar","data-simplebar-auto-hide","renderGrid","MonthStatement","monthlyEntires","statement","calculateTotal","added","t","entryId","filter","AnnualStatement","monthlyStatements","initEmptyMonthStatement","copy","statements","Array","addEntry","includes","monthStatement","deleteEntry","replaceMonthlyStatement","cat","deleteEntryByCategory","categoriesTotalMap","Map","has","oldTotal","get","newTotalIncome","newTotalExpense","set","from","Dashboard","CLIENT_ID","editCount","saveIntervalId","setInterval","saveToDrive","handleNewEntry","getCurrentAnnualStatement","newCurrentAnnualStatement","annualStatementIndex","currentYearIndex","yearDNE","allAnnualStatements","addNewAnnualStatementWithEntry","newAllAnnualStatements","addCategory","addEntryToMonthStatement","incrementEditCount","handleNewCategory","c","setCurrentAnnualStatement","handleDeleteEntry","handleDeleteCategory","deleteCategory","handleChangeViewYear","firstAvailableMonth","isStatementEmpty","handleChangeViewMonth","successLoginGoogle","response","userEmail","profileObj","email","userName","isSignedIn","fetch","method","headers","accessToken","tokenObj","access_token","then","res","json","data","message","getDataFromDrive","failureLoginGoogle","successLogoutGoogle","isSaving","body","JSON","stringify","status","userData","newStatement","newAllAnnualStatement","newAnnualStatement","newCurrentYearIndex","sort","clientId","buttonText","onLogoutSuccess","render","renderProps","disabled","onSuccess","onFailure","cookiePolicy","scope","getAvailableYears","getAvailableMonths","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2XAuGeA,G,gLAlGX,WACI,OAA0C,OAAtCC,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBC,oBAAoBH,KAAKC,MAAMG,cAAcC,QAAQ,GAE3F,I,kCAGX,WACI,OAA0C,OAAtCL,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBI,qBAAqBN,KAAKC,MAAMG,cAAcC,QAAQ,GAE5F,I,kCAGX,WACI,OAA0C,OAAtCL,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBK,YAAYF,QAAQ,GAE1D,I,mCAGX,WACI,OAA0C,OAAtCL,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuBM,aAAaH,QAAQ,GAE3D,I,uCAGX,WACI,OAA0C,OAAtCL,KAAKC,MAAMC,uBACYF,KAAKC,MAAMC,uBAAuBO,kBAAkBT,KAAKC,MAAMG,cAC/CM,kCAChBC,KAAI,SAACC,GACxB,OAAO,yBAAKC,IAAKD,EAAME,SAAW,wCAAyCC,UAAU,uCAC5EH,EAAME,SADR,WAEC,0BAAMC,UAAU,oBAAhB,UAFD,KAEqDH,EAAMI,OAF3D,UAGC,0BAAMD,UAAU,qBAAhB,UAHD,KAGsDH,EAAMK,YAIpE,O,sCAGX,WACI,OAA0C,OAAtCjB,KAAKC,MAAMC,uBACgBF,KAAKC,MAAMC,uBAAuBgB,uBACnCP,KAAI,SAACC,GAC3B,OAAO,yBAAKC,IAAKD,EAAME,SAAW,uCAAwCC,UAAU,uCAC3EH,EAAME,SADR,WAEC,0BAAMC,UAAU,oBAAhB,UAFD,KAEqDH,EAAMO,OAAOH,OAFlE,UAGC,0BAAMD,UAAU,qBAAhB,UAHD,KAGsDH,EAAMO,OAAOF,YAI3E,O,oBAGX,WACI,OACI,yBAAKF,UAAU,oBACX,yBAAKA,UAAU,0DAAf,WACA,6BACI,yBAAKA,UAAU,4BAAf,cACA,yBAAKA,UAAU,oCACX,yBAAKA,UAAU,mCACX,0BAAMA,UAAU,oBAAhB,UADJ,IAEMf,KAAKG,uBAEX,yBAAKY,UAAU,mCACX,0BAAMA,UAAU,qBAAhB,UADJ,IAEMf,KAAKM,0BAInB,6BACKN,KAAKoB,6BAEV,6BACI,yBAAKL,UAAU,4BAAf,aACA,yBAAKA,UAAU,oCACX,yBAAKA,UAAU,mCACX,0BAAMA,UAAU,oBAAhB,UADJ,IAEMf,KAAKqB,wBAEX,yBAAKN,UAAU,mCACX,0BAAMA,UAAU,qBAAhB,UADJ,IAEMf,KAAKsB,2BAInB,6BACKtB,KAAKuB,iC,GA7FAC,IAAMC,Y,iBCSjBC,G,oBAXX,WAAYC,EAAIC,EAAMZ,EAAQC,EAASH,EAAUe,EAAUC,GAAc,oBACrE9B,KAAK2B,GAAKA,EACV3B,KAAK4B,KAAOA,EACZ5B,KAAKgB,OAASA,EACdhB,KAAKiB,QAAUA,EACfjB,KAAKc,SAAWA,EAChBd,KAAK6B,SAAWA,EAChB7B,KAAK8B,YAAcA,MCIZC,E,WAXX,WAAYC,EAAMC,EAAOC,GAAM,oBAC3BlC,KAAKgC,MAAQA,EACbhC,KAAKiC,OAASA,EACdjC,KAAKkC,KAAOA,E,yCAGhB,SAAMN,GACF,OAAO5B,KAAKgC,OAASJ,EAAKI,MAAQhC,KAAKiC,QAAUL,EAAKK,OAASjC,KAAKkC,MAAQN,EAAKM,Q,KC4O1EC,E,kDA9NX,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IAhBVmC,cAAgB,CACZ,CAACC,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,GAAIC,KAAM,IAC7B,CAACF,KAAM,MAAOC,IAAK,GAAIC,KAAM,IAC7B,CAACF,KAAM,MAAOC,IAAK,GAAIC,KAAM,KAGd,EAuBnBC,WAAa,WACT,IADe,EACXC,EAAe,EADJ,cAEK,EAAKL,eAFV,IAEf,2BAAwC,CAAC,IAA9BH,EAA6B,QACpC,GAAIA,EAAMI,OAAS,EAAKK,MAAMC,WAAY,CACtCF,EAAeR,EAAMK,IACrB,QALO,8BAQXM,MAAM,EAAKF,MAAMG,cAAgBD,MAAM,EAAKF,MAAMI,eAChB,IAAlC,EAAKJ,MAAMG,YAAYE,QAAmD,IAAnC,EAAKL,MAAMI,aAAaC,QAC3B,IAApC,EAAKL,MAAMM,cAAcD,QAAoD,IAApC,EAAKL,MAAMO,cAAcF,SAGtE,EAAK9C,MAAMuC,WAAW,IAAId,EACtB,EAAKgB,MAAMQ,QACX,IAAInB,EAAK,EAAKW,MAAMS,UAAWV,EAAc,EAAKC,MAAMU,UACxD,EAAKV,MAAMG,YACX,EAAKH,MAAMI,aACX,EAAKJ,MAAMM,cACX,EAAKN,MAAMO,cACX,EAAKP,MAAMW,mBACf,EAAKC,SAAS,CAACJ,QAAS,EAAKR,MAAMQ,QAAU,MA5C9B,EA+CnBK,cAAgB,WACR,EAAKb,MAAMc,iBAAiBT,OAAS,GACrC,EAAK9C,MAAMsD,cAAc,EAAKb,MAAMc,mBAjDzB,EAqDnBC,YAAc,WACV,EAAKH,SAAS,CACVN,cAAe,GACfC,cAAe,GACfJ,YAAa,IACbC,aAAc,IACdO,iBAAkB,MA3DP,EA+DnBK,oBAAsB,WAClB,EAAKJ,SAAS,CACVE,iBAAkB,MAjEP,EA2HnBG,kBAAoB,SAACC,GACjB,IAAM5B,EAAO4B,EAAEC,OAAOC,MACtB,EAAKR,SAAS,CAACH,UAAWnB,KA7HX,EAgInB+B,mBAAoB,SAACH,GACjB,IAAM3B,EAAQ2B,EAAEC,OAAOC,MACvBE,QAAQC,IAAIhC,GACZ,EAAKqB,SAAS,CAACX,WAAYV,KAnIZ,EAsInBiC,iBAAkB,SAACN,GACf,IAAM1B,EAAM0B,EAAEC,OAAOC,MACrB,EAAKR,SAAS,CAACF,SAAUlB,KAtIzB,EAAKQ,MAAQ,CACTQ,QAAS,EACTC,UAAW,KACXR,WAAY,MACZS,SAAU,EACVJ,cAAe,MACfC,cAAe,OACfJ,YAAa,MACbC,aAAc,MACdO,iBAAkB,YAClBG,iBAAkB,IAZP,E,2CAgBnB,WACI,IAAIW,EAAQ,IAAIpC,EAGhB,OAFWoC,EAAMC,cAAc,KAAKD,EAAME,WAAW,GAAG,IAAIF,EAAMG,UAEpD,KADHH,EAAMI,WAAa,IAAMJ,EAAMK,aAAe,IAAML,EAAMM,gB,yBAkDzE,SAAYC,EAAOC,GACf,IAAMC,EAAMD,EAAId,OAAOC,MACT,IAAVY,EACA1E,KAAKsD,SAAS,CAACN,cAAe4B,EAAIC,SACnB,IAAVH,EACL1E,KAAKsD,SAAS,CAACL,cAAe2B,EAAIC,SACnB,IAAVH,EACL1E,KAAKsD,SAAS,CAACT,YAAa+B,IACb,IAAVF,EACL1E,KAAKsD,SAAS,CAACR,aAAc8B,IACd,IAAVF,EACL1E,KAAKsD,SAAS,CAACD,iBAAkBuB,EAAIC,SACtB,IAAVH,GACL1E,KAAKsD,SAAS,CAACE,iBAAkBoB,EAAIC,W,2BAG7C,SAAcC,EAASC,GACnB,OAAgB,OAAZD,EACO,KAEJA,EAAQnE,KAAI,SAACqE,GAChB,OAAO,4BAAQnE,IAAKmE,EAAKD,EAAWjB,MAAOkB,GAAKA,Q,+BAIxD,WAEI,IADA,IAAMC,EAAQ,GACLC,EAAI,KAAMA,EAAI,KAAMA,IACzBD,EAAME,KAAKD,GAEf,OAAOlF,KAAKoF,cAAcH,EAAO,2B,gCAGrC,WACI,IAAMI,EAAS,GAIf,OAHArF,KAAKoC,cAAckD,SAAQ,SAAArD,GACvBoD,EAAOF,KAAKlD,EAAMI,SAEfrC,KAAKoF,cAAcC,EAAQ,4B,8BAGtC,WACI,IADe,EACT9C,EAAO,GADE,cAEKvC,KAAKoC,eAFV,IAEf,2BAAwC,CAAC,IAA9BH,EAA6B,QACpC,GAAIA,EAAMI,OAASrC,KAAK0C,MAAMC,WAAY,CACtC,IAAK,IAAIuC,EAAI,EAAGA,GAAKjD,EAAMM,KAAM2C,IAC7B3C,EAAK4C,KAAKD,GAEd,QAPO,8BAUf,OAAOlF,KAAKoF,cAAc7C,EAAM,0B,oBAoBpC,WAAU,IAAD,OACL,OACI,yBAAKxB,UAAU,gBACX,yBAAKA,UAAU,wBAAf,aAGA,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBAAf,QACA,yBAAKA,UAAU,sBACX,4BAAQA,UAAU,sBAAsB+C,MAAO9D,KAAK0C,MAAMS,UACtDoC,SAAU,SAAC3B,GAAD,OAAO,EAAKD,kBAAkBC,KACvC5D,KAAKwF,qBAEV,4BAAQzE,UAAU,sBAAsB+C,MAAO9D,KAAK0C,MAAMC,WACtD4C,SAAU,SAAC3B,GAAD,OAAO,EAAKG,mBAAmBH,KACxC5D,KAAKyF,sBAEV,4BAAQ1E,UAAU,sBAAsB+C,MAAO9D,KAAK0C,MAAMU,SACtDmC,SAAU,SAAC3B,GAAD,OAAO,EAAKM,iBAAiBN,KACtC5D,KAAK0F,sBAIlB,yBAAK3E,UAAU,uBACX,yBAAKA,UAAU,uBAAf,YACA,2BAAOA,UAAU,sBAAsB4E,UAAU,OAC7C7B,MAAO9D,KAAK0C,MAAMM,cAClBuC,SAAU,SAAAZ,GAAG,OAAI,EAAKiB,YAAY,EAAGjB,OAE7C,yBAAK5D,UAAU,uBACX,yBAAKA,UAAU,uBAAf,YACA,2BAAOA,UAAU,sBAAsB4E,UAAU,OAC7C7B,MAAO9D,KAAK0C,MAAMO,cAClBsC,SAAU,SAAAZ,GAAG,OAAI,EAAKiB,YAAY,EAAGjB,OAE7C,yBAAK5D,UAAU,uBACX,yBAAKA,UAAU,uBAAf,UACA,2BAAOA,UAAU,sBAAsB4E,UAAU,UAC7C7B,MAAO9D,KAAK0C,MAAMG,YAClB0C,SAAU,SAAAZ,GAAG,OAAI,EAAKiB,YAAY,EAAGjB,OAE7C,yBAAK5D,UAAU,uBACX,yBAAKA,UAAU,uBAAf,WACA,2BAAOA,UAAU,sBAAsB4E,UAAU,UAC7C7B,MAAO9D,KAAK0C,MAAMI,aAClByC,SAAU,SAAAZ,GAAG,OAAI,EAAKiB,YAAY,EAAGjB,OAE7C,yBAAK5D,UAAU,uBACX,yBAAKA,UAAU,uBAAf,eACA,2BAAOA,UAAU,sBAAsB4E,UAAU,OAC7C7B,MAAO9D,KAAK0C,MAAMW,iBAClBkC,SAAU,SAAAZ,GAAG,OAAI,EAAKiB,YAAY,EAAGjB,OAE7C,6BACA,yBAAK5D,UAAU,uBACX,4BAAQA,UAAU,mBAAmB8E,QAAS,kBAAM,EAAKrD,eAAzD,OACA,4BAAQzB,UAAU,mBAAmB8E,QAAS,kBAAM,EAAKpC,gBAAzD,WAGR,6BACA,yBAAK1C,UAAU,wBAAf,gBAGA,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBAAf,YACA,2BAAOA,UAAU,sBAAsB4E,UAAU,OAC7C7B,MAAO9D,KAAK0C,MAAMc,iBAClB+B,SAAU,SAAAZ,GAAG,OAAI,EAAKiB,YAAY,EAAGjB,OAE7C,6BACA,yBAAK5D,UAAU,uBACX,4BAAQA,UAAU,mBAAmB8E,QAAS,kBAAM,EAAKtC,kBAAzD,OACA,4BAAQxC,UAAU,mBAAmB8E,QAAS,kBAAM,EAAKnC,wBAAzD,gB,GAvOFlC,IAAMC,WCHtBqE,G,gLAQF,WACI,OACI,yBAAK/E,UAAYf,KAAKC,MAAM8F,OAAS,2BAA6B,aAC7D/F,KAAKC,MAAM6D,U,wBARxB,WAEI,OADA9D,KAAKgG,SACEhG,KAAKgG,W,GALGxE,IAAMC,YAAvBqE,EAEKE,OAAS,EAeLF,QCfTG,G,wKAQF,SAAYC,GACR,OAAOA,EAAUvF,KAAI,SAACiE,EAAKM,GACvB,OAAY,OAARN,EACO,kBAAC,EAAD,CAAU/D,IAAKiF,EAASK,YAAe,QAAUrC,MAAO,KAAMiC,QAAQ,IAEnE,IAANb,EACO,kBAAC,EAAD,CAAUrE,IAAKiF,EAASK,YAAc,QAAUrC,MAAOc,EAAKmB,QAAQ,IAEpE,kBAAC,EAAD,CAAUlF,IAAKiF,EAASK,YAAc,QAAUrC,MAAOc,EAAKmB,QAAQ,S,oBAM3F,WACI,OACI,yBAAKhF,UAAWf,KAAKC,MAAMmG,YAAc,2BAA4B,YAChEpG,KAAKqG,YAAYrG,KAAKC,MAAMqG,gB,uBAtBzC,WAEI,OADAtG,KAAKuG,QACEvG,KAAKuG,U,GALE/E,IAAMC,YAAtBwE,EAEKM,MAAQ,EA6BJN,QCqJAO,E,4MAhLXpE,cAAgB,CACZ,CAACC,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,EAAGC,KAAM,IAC5B,CAACF,KAAM,MAAOC,IAAK,GAAIC,KAAM,IAC7B,CAACF,KAAM,MAAOC,IAAK,GAAIC,KAAM,IAC7B,CAACF,KAAM,MAAOC,IAAK,GAAIC,KAAM,K,EAuFjCkE,iBAAmB,SAAC7C,GAChB,IAAM5B,EAAO4B,EAAEC,OAAOC,MACtB,EAAK7D,MAAMwG,iBAAiBzE,I,EAGhC0E,kBAAmB,SAAC9C,GAChB,IADsB,EAChB3B,EAAQ2B,EAAEC,OAAOC,MADD,cAEN,EAAK1B,eAFC,IAEtB,2BAAoC,CAAC,IAA1BuE,EAAyB,QAChC,GAAIA,EAAEtE,OAASJ,EAAO,CAClB,EAAKhC,MAAMyG,kBAAkBC,EAAErE,KAC/B,QALc,gC,gDAzF1B,SAAWsE,GAAkB,IAAD,OACxB,GAAwB,OAApBA,EAAJ,CAGA,IAJwB,EAIlBC,EAAaD,EAAgBC,WAC7BC,EAAO,CAAC,CAAC,UALS,cAMJ9G,KAAKoC,eAND,IAMxB,2BAAwC,CAAC,IAA9BH,EAA6B,QACpC,IAAKA,EAAMK,OAAStC,KAAKC,MAAMG,aAAc,CACzC,IAAK,IAAI8E,EAAI,EAAGA,EAAIjD,EAAMM,KAAM2C,IAC5B4B,EAAK3B,KAAK,CAAC,GAAD,OAAIlD,EAAMI,KAAV,YAAmB6C,EAAI,EAAvB,aAA8BlF,KAAKC,MAAMC,uBAAuB8B,QAE9E,QAXgB,8BAexB,OAAO8E,EAAKnG,KAAI,SAACiB,EAAMsD,GACnB,GAAgB,UAAZtD,EAAK,GAAgB,CACrB,IAAImF,EAAmB,CAACnF,GAIxB,OAHAiF,EAAWvB,SAAQ,SAAA0B,GACfD,EAAiB5B,KAAK,CAAC,EAAK8B,aAAaD,QAEtC,kBAAC,EAAD,CAASnG,IAAKoF,EAAQiB,WAAa,OAAQZ,WAAYS,EAAkBX,aAAa,IAE7F,IAAIe,EAAU,EAAKlH,MAAMC,uBAAuBkH,gBAAgB,EAAKnH,MAAMG,cACvEkG,EAAa,CAAC1E,GASlB,OARAiF,EAAWvB,SAAQ,SAAA0B,GACfV,EAAWnB,KAAK,IAChBgC,EAAQ7B,SAAQ,SAAA1E,GACRA,EAAME,WAAakG,GAAgBpG,EAAMgB,KAAKM,OAASgD,GACvDoB,EAAWA,EAAWvD,OAAS,GAAGoC,KAAK,EAAKkC,YAAYzG,UAI7D,kBAAC,EAAD,CAASC,IAAKoF,EAAQiB,WAAa,OAAQZ,WAAYA,EAAYF,aAAa,U,8BAKnG,SAAiBe,GAAU,IAAD,OACtB,OAAOA,EAAQxG,KAAI,SAACC,GAChB,OAAO,EAAKyG,YAAYzG,Q,0BAIhC,SAAa0G,GAAO,IAAD,OACf,OACI,yBAAKzG,IAAG,sBAAiByG,GAAQvG,UAAU,qBACvC,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,+BAA+B8E,QAAS,kBAAM,EAAK5F,MAAMsH,iBAAiBD,KAAzF,QACA,yBAAKvG,UAAU,0BACVuG,O,yBAOrB,SAAY1G,GAAQ,IAAD,OACf,OACI,yBAAKC,IAAKD,EAAMe,GAAIZ,UAAU,qBAC1B,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,+BAA+B8E,QAAS,kBAAM,EAAK5F,MAAMuH,cAAc5G,EAAMe,MAA5F,QACA,yBAAKZ,UAAU,0BACX,6BAAMH,EAAMiB,UACZ,6BAAK,0BAAMd,UAAU,oBAAhB,UAAL,IAAwDH,EAAMI,QAC9D,6BAAK,0BAAMD,UAAU,qBAAhB,UAAL,IAAyDH,EAAMK,WAGvE,yBAAKF,UAAU,8BACVH,EAAMkB,gB,gCAMvB,SAAmBgD,GACf,OAAgB,OAAZA,EACO,KAEJA,EAAQnE,KAAI,SAACqE,GAChB,OAAO,4BAAQnE,IAAKmE,EAAK,uBAAwBlB,MAAOkB,GAAKA,Q,4BAmBrE,WACI,OAA0C,OAAtChF,KAAKC,MAAMC,uBACJF,KAAKC,MAAMC,uBAAuB8B,KAEtC,K,6BAGX,WAAmB,IAAD,OACd,GAAmC,OAA/BhC,KAAKC,MAAMwH,gBAA0B,CACrC,IAAIC,EAAgB1H,KAAKC,MAAMwH,gBAAgB,GAO/C,OANAzH,KAAKC,MAAMwH,gBAAgBnC,SAAQ,SAAArD,GAC3BA,IAAU,EAAKhC,MAAMG,eACrBsH,EAAgB,EAAKzH,MAAMG,iBAI5BsH,EAEX,MAAO,K,iCAKX,SAAoBrC,GAAS,IAAD,OACxB,GAAe,OAAXA,EACA,OAAO,KAEX,IAAMsC,EAAc,GAIpB,OAHAtC,EAAOC,SAAQ,SAAAqB,GACXgB,EAAYxC,KAAK,EAAK/C,cAAcuE,EAAI,GAAGtE,SAExCsF,I,oBAGX,WAAU,IAAD,OACL,OACI,yBAAK5G,UAAU,oBACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,4BAAf,WACA,yBAAKA,UAAU,4BAAf,QACA,4BAAQA,UAAU,4BAA4B+C,MAAO9D,KAAK4H,iBACtDrC,SAAU,SAAC3B,GAAD,OAAO,EAAK6C,iBAAiB7C,KACtC5D,KAAK6H,mBAAmB7H,KAAKC,MAAM6H,iBAExC,yBAAK/G,UAAU,4BAAf,SACA,4BAAQA,UAAU,4BAA4B+C,MAAO9D,KAAKoC,cAAcpC,KAAKC,MAAMG,aAAe,GAAGiC,KAChGkD,SAAU,SAAC3B,GAAD,OAAO,EAAK8C,kBAAkB9C,KACxC5D,KAAK6H,mBAAmB7H,KAAK+H,oBAAoB/H,KAAKC,MAAMwH,oBAGrE,yBAAK1G,UAAU,sBAAsBiH,kBAAA,EAAeC,2BAAyB,SACzE,yBAAKlH,UAAU,oBACNf,KAAKkI,WAAWlI,KAAKC,MAAMC,+B,GAxK9BsB,IAAMC,W,SCsEjB0G,E,WA1EX,WAAYxG,EAAIM,GAAQ,oBACpBjC,KAAK2B,GAAKA,EACV3B,KAAKiC,MAAQA,EACbjC,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAKoI,eAAiB,G,wCAG1B,SAAKC,GACDrI,KAAK2B,GAAK0G,EAAU1G,GACpB3B,KAAKiC,MAAQoG,EAAUpG,MACvBjC,KAAKO,YAAc8H,EAAU9H,YAC7BP,KAAKQ,aAAe6H,EAAU7H,aAC9BR,KAAKoI,eAAiBC,EAAUD,iB,4BAGpC,WAAkB,IAAD,OACbpI,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAKoI,eAAe9C,SAAQ,SAAA1E,GACxB,EAAKL,cAAgBK,EAAMI,OAC3B,EAAKR,eAAiBI,EAAMK,a,sBAIpC,SAASL,GACLZ,KAAKoI,eAAejD,KAAKvE,GACzBZ,KAAKsI,mB,8BAGT,WACI,OAAsC,IAA/BtI,KAAKoI,eAAerF,S,6CAG/B,WACI,IAAM5B,EAAS,GAqBf,OApBAnB,KAAKoI,eAAe9C,SAAQ,SAAA1E,GAExB,IADA,IAAI2H,GAAQ,EACHrD,EAAI,EAAGA,EAAI/D,EAAO4B,OAAQmC,IAAK,CACpC,IAAMsD,EAAIrH,EAAO+D,GACjB,GAAIsD,EAAE1H,WAAaF,EAAME,SAAU,CAC/B0H,EAAExH,SAAWJ,EAAMI,OACnBwH,EAAEvH,UAAYL,EAAMK,QACpBE,EAAO+D,GAAKsD,EACZD,GAAQ,EACR,OAGHA,GACDpH,EAAOgE,KAAK,CACRrE,SAAUF,EAAME,SAChBE,QAASJ,EAAMI,OACfC,SAAUL,EAAMK,aAIrBE,I,yBAGX,SAAYsH,GACRzI,KAAKoI,eAAiBpI,KAAKoI,eAAeM,QAAO,SAAC9H,GAC9C,OAAOA,EAAMe,KAAO8G,KAExBzI,KAAKsI,mB,mCAGT,SAAsBtB,GAClBhH,KAAKoI,eAAiBpI,KAAKoI,eAAeM,QAAO,SAAC9H,GAC9C,OAAOA,EAAME,WAAakG,KAE9BhH,KAAKsI,qB,KCqCEK,E,WA1GX,WAAY3G,GAAO,oBACfhC,KAAKgC,KAAOA,EACZhC,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAK4I,kBAAoB5I,KAAK6I,0BAC9B7I,KAAK6G,WAAa,G,wCAGtB,SAAKwB,GACDrI,KAAKgC,KAAOqG,EAAUrG,KACtBhC,KAAKO,YAAc8H,EAAU9H,YAC7BP,KAAKQ,aAAe6H,EAAU7H,aAC9BR,KAAK4I,kBAAoB5I,KAAK6I,0BAC9B7I,KAAK6G,WAAawB,EAAUxB,WAC5B,IAAK,IAAI3B,EAAI,EAAGA,EAAIlF,KAAK4I,kBAAkB7F,OAAQmC,IAC/ClF,KAAK4I,kBAAkB1D,GAAG4D,KAAKT,EAAUO,kBAAkB1D,M,qCAInE,WAEI,IADA,IAAI6D,EAAa,IAAIC,MAAM,IAClB9D,EAAI,EAAGA,EAAI6D,EAAWhG,OAAQmC,IACnC6D,EAAW7D,GAAK,IAAIiD,EAAejD,GAAIA,EAAI,GAE/C,OAAO6D,I,4BAGX,WAAkB,IAAD,OACb/I,KAAKO,YAAc,EACnBP,KAAKQ,aAAe,EACpBR,KAAK4I,kBAAkBtD,SAAQ,SAAA+C,GAC3B,EAAK9H,cAAgB8H,EAAU9H,YAC/B,EAAKC,eAAiB6H,EAAU7H,kB,qCAIxC,SAAwB6H,GACpBrI,KAAK4I,kBAAkBP,EAAUpG,MAAQ,GAAKoG,EAC9CrI,KAAKsI,mB,sCAGT,SAAyBrG,EAAOrB,GACa,MAArCZ,KAAK4I,kBAAkB3G,EAAQ,IAC/BjC,KAAK4I,kBAAkB3G,EAAQ,GAAGgH,SAASrI,GAE/CZ,KAAKsI,mB,yBAGT,SAAYxH,GAER,OADAkD,QAAQC,IAAIjE,KAAK6G,cACb7G,KAAK6G,WAAW9D,OAAS,GAAK/C,KAAK6G,WAAWqC,SAASpI,MAG3Dd,KAAK6G,WAAW1B,KAAKrE,IACd,K,iCAGX,SAAoBmB,GAChB,OAAOjC,KAAK4I,kBAAkB3G,EAAQ,GAAG1B,c,kCAE7C,SAAqB0B,GACjB,OAAOjC,KAAK4I,kBAAkB3G,EAAQ,GAAGzB,e,6BAE7C,SAAgByB,GACZ,OAAOjC,KAAK4I,kBAAkB3G,EAAQ,GAAGmG,iB,+BAE7C,SAAkBnG,GACd,OAAOjC,KAAK4I,kBAAkB3G,EAAQ,K,yBAG1C,SAAYwG,EAASxG,GACjB,IAAMkH,EAAiBnJ,KAAKS,kBAAkBwB,GAC9CkH,EAAeC,YAAYX,GAC3BzI,KAAKqJ,wBAAwBF,GAC7BnJ,KAAKsI,mB,4BAGT,SAAetB,GACXhH,KAAK6G,WAAa7G,KAAK6G,WAAW6B,QAAO,SAACY,GACtC,OAAOA,IAAQtC,KAEnBhH,KAAK4I,kBAAkBtD,SAAQ,SAAA+C,GAC3BA,EAAUkB,sBAAsBvC,MAEpChH,KAAKsI,mB,kCAGT,WACI,IAAMkB,EAAqB,IAAIC,IAc/B,OAbAzJ,KAAK4I,kBAAkBtD,SAAQ,SAAA+C,GACFA,EAAU3H,kCAClB4E,SAAQ,SAAA1E,GACrB,GAAI4I,EAAmBE,IAAI9I,EAAME,UAAW,CACxC,IAAM6I,EAAWH,EAAmBI,IAAIhJ,EAAME,UACxC+I,EAAiBjJ,EAAMI,OAAS2I,EAAS3I,OACzC8I,EAAkBlJ,EAAMK,QAAU0I,EAAS1I,QACjDuI,EAAmBO,IAAInJ,EAAME,SAAU,CAACE,OAAQ6I,EAAgB5I,QAAS6I,SAEzEN,EAAmBO,IAAInJ,EAAME,SAAU,CAACE,OAAQJ,EAAMI,OAAQC,QAASL,EAAMK,gBAIlF+H,MAAMgB,KAAKR,GAAoB,yCAAyB,CAAC1I,SAA1B,KAAoCK,OAApC,a,aCgO/B8I,E,kDAjTX,WAAYhK,GAAQ,IAAD,8BACf,cAAMA,IAbViK,UAAY,0EAYO,EAXnBC,UAAY,EAWO,EAVnBC,eAAiBC,aAAY,WACrB,EAAKF,UAAY,IACM,IAAnB,EAAKA,YACL,EAAKG,cACLtG,QAAQC,IAAI,qBAEd,EAAKkG,aAEZ,KAEgB,EA+CnBI,eAAiB,SAAC3J,GACd,GAAyC,OAArC,EAAK4J,4BAAT,CAKA,IAAMC,EAA4B,EAAKD,4BACnCE,EAAuB,EAAKhI,MAAMiI,iBACtC,GAAI/J,EAAMgB,KAAKI,OAASyI,EAA0BzI,KAAM,CACpD,IAAI4I,GAAU,EAOd,GANA,EAAKlI,MAAMmI,oBAAoBvF,SAAQ,SAAC+C,EAAWnD,GAC3CmD,EAAUrG,OAASpB,EAAMgB,KAAKI,OAC9B4I,GAAU,EACVF,EAAuBxF,MAG3B0F,EAEA,YADA,EAAKE,+BAA+BlK,GAI5C,IAAMmK,EAAyB,EAAKrI,MAAMmI,oBAC1CE,EAAuBL,GAAsBM,YAAYpK,EAAME,UAC/DiK,EAAuBL,GAAsBO,yBAAyBrK,EAAMgB,KAAKK,MAAOrB,GACxF,EAAK0C,SAAS,CACVuH,oBAAqBE,EACrBJ,iBAAkBD,EAClBtK,aAAcQ,EAAMgB,KAAKK,QAE7B,EAAKiJ,0BA3BD,EAAKJ,+BAA+BlK,IAjDzB,EA+EnBuK,kBAAoB,SAACC,GACjB,IAAMX,EAA4B,EAAKD,4BACnCC,EAA0BO,YAAYI,IACtC,EAAKC,0BAA0BZ,IAlFpB,EAsFnBa,kBAAoB,SAAC7C,GACjB,IAAMvI,EAAyB,EAAKsK,4BACpCtK,EAAuBkJ,YAAYX,EAAS,EAAK/F,MAAMtC,cACvD,EAAKiL,0BAA0BnL,GAC/B,EAAKgL,sBA1FU,EA6FnBK,qBAAuB,SAACvE,GACpB,IAAM9G,EAAyB,EAAKsK,4BACpCtK,EAAuBsL,eAAexE,GACtC,EAAKqE,0BAA0BnL,GAC/B,EAAKgL,sBAjGU,EA0HnBO,qBAAuB,SAACzJ,GAEpB,IADA,IAAM6I,EAAsB,EAAKnI,MAAMmI,oBAC/B3F,EAAI,EAAGA,EAAI2F,EAAoB9H,SAAUmC,EAC7C,IAAK2F,EAAoB3F,GAAGlD,QAAUA,EAAM,CACxC,IAAI0J,GAAuB,EAS3B,OARAb,EAAoB3F,GAAG0D,kBAAkBtD,SAAQ,SAAA6D,GACxCA,EAAewC,qBAChBD,EAAsBvC,EAAelH,UAI7C,EAAKqB,SAAS,CAACqH,iBAAkBzF,EAAG9E,aAAcsL,SAClD,EAAKR,uBAtIE,EA4InBU,sBAAwB,SAAC3J,GACrB,EAAKqB,SAAS,CAAClD,aAAc6B,IAC7B,EAAKiJ,sBA9IU,EAiJnBW,mBAAqB,SAACC,GAClB,EAAKxI,SAAS,CACVyI,UAAWD,EAASE,WAAWC,MAC/BC,SAAUJ,EAASE,WAAW3J,KAC9B8J,YAAY,IAGhBC,MAAM,SAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,YAAaT,EAASU,SAASC,gBAGlCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACH7I,QAAQC,IAAI4I,EAAKC,SACjB,EAAKC,uBAjKE,EAqKnBC,mBAAqB,SAAClB,GAClB9H,QAAQC,IAAI,6BACZD,QAAQC,IAAI6H,IAvKG,EA0KnBmB,oBAAsB,WAClB,EAAK3J,SAAS,CACV6I,YAAY,EACZD,SAAU,GACVH,UAAW,GACX3L,aAAc,EACduK,iBAAkB,EAClBE,oBAAqB,KAEzB7G,QAAQC,IAAI,sCAnLG,EAsLnBqG,YAAc,WACL,EAAK5H,MAAMyJ,aAGhB,EAAK7I,SAAS,CAAC4J,UAAU,IACzBd,MAAM,QAAS,CACXC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBa,KAAMC,KAAKC,UAAU,EAAK3K,SAE7BgK,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEH7I,QAAQC,IAAI4I,EAAKC,SACjB9I,QAAQC,IAAR,uBAA4B4I,EAAKS,OAAS,UAAY,YACtD,EAAKhK,SAAS,CAAC4J,UAAU,SAxMd,EA4MnBH,iBAAmB,WACfX,MAAM,QACDM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEH,GAAsB,OAAlBA,EAAKU,SAAT,CAMA,IAAM1C,EAAsB,GAC5BgC,EAAKU,SAAS1C,oBAAoBvF,SAAQ,SAAA+C,GACtC,IAAMmF,EAAe,IAAI7E,EAAgBN,EAAUrG,MACnDwL,EAAa1E,KAAKT,GAClBwC,EAAoB1F,KAAKqI,MAG7B,EAAKlK,SAAS,CACVlD,aAAcyM,EAAKU,SAASnN,aAC5BuK,iBAAkBkC,EAAKU,SAAS5C,iBAChCE,oBAAqBA,IAEzB7G,QAAQC,IAAI4I,EAAKC,cAhBb,EAAKxC,kBAhNjB,EAAK5H,MAAQ,CACTyJ,YAAY,EACZD,SAAU,GACVH,UAAW,GACXmB,UAAU,EACV9M,aAAc,EACduK,iBAAkB,EAClBE,oBAAqB,IAVV,E,sDAcnB,WACQ7K,KAAKmK,UAAY,KACfnK,KAAKmK,Y,uCAIf,WACI,OAA8C,IAA1CnK,KAAK0C,MAAMmI,oBAAoB9H,OACxB,KAEJ/C,KAAK0C,MAAMmI,oBAAoB7K,KAAK0C,MAAMiI,oB,uCAGrD,SAA0B6C,GACtB,IAAIC,EAAwBzN,KAAK0C,MAAMmI,oBACvC4C,EAAsBzN,KAAK0C,MAAMiI,kBAAoB6C,EACrDxN,KAAKsD,SAAS,CAACuH,oBAAqB4C,IACpCzN,KAAKkL,uB,4CAGT,SAA+BtK,GAC3B,IAAMmK,EAAyB/K,KAAK0C,MAAMmI,oBACpC6C,EAAqB,IAAI/E,EAAgB/H,EAAMgB,KAAKI,MAC1D0L,EAAmB1C,YAAYpK,EAAME,UACrC4M,EAAmBzC,yBAAyBrK,EAAMgB,KAAKK,MAAOrB,GAC9DmK,EAAuB5F,KAAKuI,GAC5B,IAAMC,EAAsB5C,EAAuBhI,OAAS,EAC5D/C,KAAKsD,SAAS,CAACuH,oBAAqBE,EAChCJ,iBAAkBgD,EAClBvN,aAAcQ,EAAMgB,KAAKK,QAC7BjC,KAAKkL,uB,+BAwDT,WACI,IAAIjG,EAAQ,GAIZ,OAHAjF,KAAK0C,MAAMmI,oBAAoBvF,SAAQ,SAAA+C,GACnCpD,EAAME,KAAKkD,EAAUrG,SAElBiD,EAAM2I,S,gCAGjB,WACI,IAAI3L,EAAQ,GACN/B,EAAyBF,KAAKwK,4BACpC,OAA8B,MAA1BtK,EACO,MAEXA,EAAuB0I,kBAAkBtD,SAAQ,SAAA6D,GACxCA,EAAewC,oBAChB1J,EAAMkD,KAAKgE,EAAelH,UAG3BA,K,oBAgHX,WACI,OACI,yBAAKlB,UAAU,kBACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,0BAAf,UAEJ,yBAAKA,UAAU,mCAAmCiH,kBAAA,GAC9C,yBAAKjH,UAAU,2BACX,yBAAKA,UAAS,8BAA0Bf,KAAK0C,MAAMyJ,WAAoC,GAAvB,uBAC5D,yBAAKpL,UAAU,6BACX,6BAAMf,KAAK0C,MAAMwJ,UACjB,6BAAMlM,KAAK0C,MAAMqJ,YAErB,yBAAKhL,UAAS,qCAAiCf,KAAK0C,MAAMwK,SAAmC,GAAvB,uBAAtE,6BAGA,kBAAC,eAAD,CACIW,SAAU7N,KAAKkK,UACf4D,WAAW,UACXC,gBAAiB/N,KAAKiN,oBACtBe,OAAQ,SAAAC,GAAW,OACf,4BAAQpI,QAASoI,EAAYpI,QAC7BqI,SAAUD,EAAYC,SACtBnN,UAAU,2BAFV,eAOZ,yBAAKA,UAAS,yCAAoCf,KAAK0C,MAAMyJ,WAAa,qBAAuB,KAC7F,kBAAC,cAAD,CACI0B,SAAU7N,KAAKkK,UACfiE,UAAWnO,KAAK6L,mBAChBuC,UAAWpO,KAAKgN,mBAChBqB,aAAc,qBACdC,MAAO,gDACPnC,YAAY,EACZ6B,OAAQ,SAAAC,GAAW,OACf,4BAAQpI,QAASoI,EAAYpI,QAC7BqI,SAAUD,EAAYC,SACtBnN,UAAU,2BAFV,8CAQhB,kBAAC,EAAD,CAAab,uBAAwBF,KAAKwK,4BAC9BpK,aAAcJ,KAAK0C,MAAMtC,eACrC,6BACA,kBAAC,EAAD,CAASF,uBAAwBF,KAAKwK,4BAC9BhI,WAAYxC,KAAKuK,eACjBhH,cAAevD,KAAKmL,sBAIpC,yBAAKpK,UAAU,2BACZ,kBAAC,EAAD,CAAab,uBAAwBF,KAAKwK,4BAC7BpK,aAAcJ,KAAK0C,MAAMtC,aACzBqG,iBAAkBzG,KAAKyL,qBACvB/E,kBAAmB1G,KAAK4L,sBACxB9D,eAAgB9H,KAAKuO,oBACrB9G,gBAAiBzH,KAAKwO,qBACtBhH,cAAexH,KAAKsL,kBACpB/D,iBAAkBvH,KAAKuL,8B,GArTnC/J,IAAMC,WCKfgN,MAVf,WACE,OACE,yBAAK1N,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,SCGO2N,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.62c5af6c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SummaryPage.css'\r\n\r\nclass SummaryPage extends React.Component {\r\n\r\n    getMonthTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalIncome(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getMonthTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.getMonthTotalExpense(this.props.currentMonth).toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalIncome() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalIncome.toFixed(2)\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getAnnualTotalExpense() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.totalExpense.toFixed(2);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    renderMonthCategoryTotals() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            const monthStatement = this.props.currentAnnualStatement.getMonthStatement(this.props.currentMonth);\r\n            const categoriesTotal = monthStatement.getCategoriesIncomeExpenseTotal();\r\n            return categoriesTotal.map((entry) => {\r\n                return <div key={entry.category + \"-summary-month-subtotal-category-name\"} className=\"SummaryPage-income-expense-category\">\r\n                        {entry.category}: &emsp;\r\n                        <span className=\"income-indicator\">&#9650;</span> ${entry.income} &emsp;\r\n                        <span className=\"expense-indicator\">&#9660;</span> ${entry.expense} \r\n                    </div>\r\n            });\r\n        }\r\n        return null;\r\n    }\r\n\r\n    renderYearCategoryTotals() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            const allCategoriesTotal = this.props.currentAnnualStatement.getAllCategoryTotals();\r\n            return allCategoriesTotal.map((entry) => {\r\n                return <div key={entry.category + \"-summary-year-subtotal-category-name\"} className=\"SummaryPage-income-expense-category\">\r\n                        {entry.category}: &emsp;\r\n                        <span className=\"income-indicator\">&#9650;</span> ${entry.totals.income} &emsp;\r\n                        <span className=\"expense-indicator\">&#9660;</span> ${entry.totals.expense} \r\n                    </div>\r\n            });\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SummaryPage-body\">\r\n                <div className=\"SummaryPage-header-label SummaryPage-main-header-label\">Summary</div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Month</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getMonthTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getMonthTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {this.renderMonthCategoryTotals()}\r\n                </div>\r\n                <div>\r\n                    <div className=\"SummaryPage-header-label\">This Year</div>\r\n                    <div className=\"SummaryPage-income-expense-block\">\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"income-indicator\">&#9650;</span> \r\n                            ${this.getAnnualTotalIncome()}\r\n                        </div>\r\n                        <div className=\"SummaryPage-income-expense-line\">\r\n                            <span className=\"expense-indicator\">&#9660;</span> \r\n                            ${this.getAnnualTotalExpense()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {this.renderYearCategoryTotals()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SummaryPage;","class Entry {\r\n    constructor(id, date, income, expense, category, location, description) {\r\n        this.id = id;\r\n        this.date = date;\r\n        this.income = income;\r\n        this.expense = expense;\r\n        this.category = category;\r\n        this.location = location;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport default Entry;","class Date {\r\n    constructor(year, month, day) {\r\n        this.year = +year;\r\n        this.month = +month;\r\n        this.day = +day;\r\n    }\r\n\r\n    equal(date) {\r\n        return this.year === date.year && this.month === date.month && this.day === date.day;\r\n    }\r\n}\r\n\r\nexport default Date;","import React from 'react';\r\nimport './AddPage.css'\r\nimport Entry from './Entry';\r\nimport Date from './Date';\r\n\r\nclass AddPage extends React.Component {\r\n\r\n    monthsAndDays = [\r\n        {name: \"Jan\", num: 1, days: 31},\r\n        {name: \"Feb\", num: 2, days: 29},\r\n        {name: \"Mar\", num: 3, days: 31},\r\n        {name: \"Apr\", num: 4, days: 30},\r\n        {name: \"May\", num: 5, days: 31},\r\n        {name: \"Jun\", num: 6, days: 30},\r\n        {name: \"Jul\", num: 7, days: 31},\r\n        {name: \"Aug\", num: 8, days: 31},\r\n        {name: \"Sep\", num: 9, days: 30},\r\n        {name: \"Oct\", num: 10, days: 31},\r\n        {name: \"Nov\", num: 11, days: 30},\r\n        {name: \"Dec\", num: 12, days: 31}\r\n    ];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            idCount: 0,\r\n            inputYear: 2022,\r\n            inputMonth: \"Jan\",\r\n            inputDay: 1,\r\n            inputCategory: \"abc\",         // 1\r\n            inputLocation: \"soeb\",         // 2\r\n            inputIncome: \"123\",           // 3\r\n            inputExpense: \"423\",          // 4\r\n            inputDescription: \"dsafsafsd\",      // 5\r\n            inputNewCategory: \"\",      // 6\r\n        }\r\n    }\r\n\r\n    timeNow() {\r\n        var today = new Date();\r\n        var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n        var time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        return date + \" \" + time;\r\n    }\r\n\r\n    onAddEntry = () => {\r\n        let monthNumeric = 1;\r\n        for (const month of this.monthsAndDays) {\r\n            if (month.name === this.state.inputMonth) {\r\n                monthNumeric = month.num;\r\n                break;\r\n            }\r\n        }\r\n        if (isNaN(this.state.inputIncome) || isNaN(this.state.inputExpense) ||\r\n            this.state.inputIncome.length === 0 || this.state.inputExpense.length === 0 ||\r\n            this.state.inputCategory.length === 0 || this.state.inputLocation.length === 0) {\r\n            return;\r\n        }\r\n        this.props.onAddEntry(new Entry(\r\n            this.state.idCount, \r\n            new Date(this.state.inputYear, monthNumeric, this.state.inputDay), \r\n            this.state.inputIncome, \r\n            this.state.inputExpense, \r\n            this.state.inputCategory, \r\n            this.state.inputLocation, \r\n            this.state.inputDescription));\r\n        this.setState({idCount: this.state.idCount + 1});\r\n    }\r\n\r\n    onAddCategory = () => {\r\n        if (this.state.inputNewCategory.length > 0) {\r\n            this.props.onAddCategory(this.state.inputNewCategory);\r\n        }\r\n    }\r\n\r\n    onClearForm = () => {\r\n        this.setState({\r\n            inputCategory: \"\",         \r\n            inputLocation: \"\",         \r\n            inputIncome: \"0\",           \r\n            inputExpense: \"0\",          \r\n            inputDescription: \"\",      \r\n        });\r\n    }\r\n\r\n    onClearCateogryForm = () => {\r\n        this.setState({\r\n            inputNewCategory: \"\"\r\n        });\r\n    }\r\n\r\n    updateInput(field, evt) {\r\n        const val = evt.target.value;\r\n        if (field === 1) \r\n            this.setState({inputCategory: val.trim()});\r\n        else if (field === 2) \r\n            this.setState({inputLocation: val.trim()});\r\n        else if (field === 3) \r\n            this.setState({inputIncome: val});\r\n        else if (field === 4) \r\n            this.setState({inputExpense: val});\r\n        else if (field === 5) \r\n            this.setState({inputDescription: val.trim()});\r\n        else if (field === 6)\r\n            this.setState({inputNewCategory: val.trim()});\r\n    }\r\n\r\n    renderOptions(options, keySuffix) {\r\n        if (options === null) {\r\n            return null;\r\n        }\r\n        return options.map((op) => {\r\n            return <option key={op + keySuffix} value={op}>{op}</option>;\r\n        });\r\n    }\r\n\r\n    renderYearOptions() {\r\n        const years = []\r\n        for (let i = 2021; i < 2030; i++) {\r\n            years.push(i);\r\n        }\r\n        return this.renderOptions(years, \"-add-page-year-option\");\r\n    }\r\n\r\n    renderMonthOptions() {\r\n        const months = [];\r\n        this.monthsAndDays.forEach(month => {\r\n            months.push(month.name);\r\n        });\r\n        return this.renderOptions(months, \"-add-page-month-option\");\r\n    }\r\n\r\n    renderDayOptions() {\r\n        const days = [];\r\n        for (const month of this.monthsAndDays) {\r\n            if (month.name === this.state.inputMonth) {\r\n                for (let i = 1; i <= month.days; i++) {\r\n                    days.push(i);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return this.renderOptions(days, \"-add-page-day-option\");\r\n    }\r\n\r\n    onChangeInputYear = (e) => {\r\n        const year = e.target.value;\r\n        this.setState({inputYear: year});\r\n    }\r\n\r\n    onChangeInputMonth =(e) => {\r\n        const month = e.target.value;\r\n        console.log(month);\r\n        this.setState({inputMonth: month});\r\n    }\r\n\r\n    onChangeInputDay =(e) => {\r\n        const day = e.target.value;\r\n        this.setState({inputDay: day});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"AddPage-body\">\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Entry\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Date</div>\r\n                        <div className='AddPage-date-block'>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputYear}\r\n                                onChange={(e) => this.onChangeInputYear(e)}>\r\n                                {this.renderYearOptions()}\r\n                            </select>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputMonth}\r\n                                onChange={(e) => this.onChangeInputMonth(e)}>\r\n                                {this.renderMonthOptions()}\r\n                            </select>\r\n                            <select className=\"AddPage-date-select\" value={this.state.inputDay}\r\n                                onChange={(e) => this.onChangeInputDay(e)}>\r\n                                {this.renderDayOptions()}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputCategory}\r\n                            onChange={evt => this.updateInput(1, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Location</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputLocation}\r\n                            onChange={evt => this.updateInput(2, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Income</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputIncome}\r\n                            onChange={evt => this.updateInput(3, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Expense</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"numeric\"\r\n                            value={this.state.inputExpense}\r\n                            onChange={evt => this.updateInput(4, evt)}></input>\r\n                    </div>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Description</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\"\r\n                            value={this.state.inputDescription}\r\n                            onChange={evt => this.updateInput(5, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddEntry()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onClearForm()}>Clear</button>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                <div className=\"AddPage-header-label\">\r\n                    Add Category\r\n                </div>\r\n                <div className=\"AddPage-form\">\r\n                    <div className=\"AddPage-field-block\">\r\n                        <div className=\"AddPage-field-label\">Category</div>\r\n                        <input className=\"AddPage-field-input\" inputMode=\"text\" \r\n                            value={this.state.inputNewCategory}\r\n                            onChange={evt => this.updateInput(6, evt)}></input>\r\n                    </div>\r\n                    <br/>\r\n                    <div className=\"AddPage-field-block\">\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onAddCategory()}>Add</button>\r\n                        <button className=\"AddPage-form-btn\" onClick={() => this.onClearCateogryForm()}>Clear</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPage;","import React from \"react\";\r\n\r\nclass GridCell extends React.Component {\r\n\r\n    static cellId = 0;\r\n    static newCellId() {\r\n        this.cellId++;\r\n        return this.cellId;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className= {this.props.isDate ? \"grid-cell grid-cell-date\" : \"grid-cell\"}>\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridCell;","import React from \"react\";\r\nimport GridCell from \"./GridCell\";\r\nimport \"./Grid.css\"\r\n\r\nclass GridRow extends React.Component {\r\n\r\n    static rowId = 0;\r\n    static newRowId() {\r\n        this.rowId++;\r\n        return this.rowId;\r\n    }\r\n\r\n    renderCells(columnRow) {\r\n        return columnRow.map((val, i) => {\r\n            if (val === null) {\r\n                return <GridCell key={GridCell.newCellId()  + \"-cell\" } value={null} isDate={false} />;\r\n            } else {\r\n                if (i === 0) {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={true}/>;\r\n                } else {\r\n                    return <GridCell key={GridCell.newCellId() + \"-cell\" } value={val} isDate={false}/>;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.isHeaderRow ? \"grid-row grid-header-row\": \"grid-row\" }>\r\n                {this.renderCells(this.props.rowContent)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridRow;","import React from \"react\";\r\nimport './HistoryPage.css'\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport GridRow from \"./GridRow\";\r\n\r\nclass HistoryPage extends React.Component {\r\n\r\n    monthsAndDays = [\r\n        {name: \"Jan\", num: 1, days: 31},\r\n        {name: \"Feb\", num: 2, days: 29},\r\n        {name: \"Mar\", num: 3, days: 31},\r\n        {name: \"Apr\", num: 4, days: 30},\r\n        {name: \"May\", num: 5, days: 31},\r\n        {name: \"Jun\", num: 6, days: 30},\r\n        {name: \"Jul\", num: 7, days: 31},\r\n        {name: \"Aug\", num: 8, days: 31},\r\n        {name: \"Sep\", num: 9, days: 30},\r\n        {name: \"Oct\", num: 10, days: 31},\r\n        {name: \"Nov\", num: 11, days: 30},\r\n        {name: \"Dec\", num: 12, days: 31}\r\n    ];\r\n\r\n    renderGrid(annualStatement) {\r\n        if (annualStatement === null) {\r\n            return;\r\n        }\r\n        const categories = annualStatement.categories;\r\n        const rows = [[\"Dates\"]];\r\n        for (const month of this.monthsAndDays) {\r\n            if (+month.num === +this.props.currentMonth) {\r\n                for (let i = 0; i < month.days; i++) {\r\n                    rows.push([`${month.name} ${(i + 1)}, ${this.props.currentAnnualStatement.year}`]);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return rows.map((date, i) => {\r\n            if (date[0] === \"Dates\") {\r\n                let headerRowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    headerRowContent.push([this.renderHeader(categoryName)]);\r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={headerRowContent} isHeaderRow={true}/>\r\n            } else {\r\n                let entries = this.props.currentAnnualStatement.getMonthEntries(this.props.currentMonth);\r\n                let rowContent = [date];\r\n                categories.forEach(categoryName => {\r\n                    rowContent.push([]);\r\n                    entries.forEach(entry => {\r\n                        if (entry.category === categoryName && entry.date.day === +i) {\r\n                            rowContent[rowContent.length - 1].push(this.renderEntry(entry));\r\n                        }\r\n                    });                \r\n                });\r\n                return <GridRow key={GridRow.newRowId() + \"-row\"} rowContent={rowContent} isHeaderRow={false}/>\r\n            }\r\n        })\r\n    }\r\n\r\n    renderAllEntries(entries) {\r\n        return entries.map((entry) => {\r\n            return this.renderEntry(entry);\r\n        });\r\n    }\r\n\r\n    renderHeader(text) {\r\n        return ( \r\n            <div key={`Grid-header-${text}`} className=\"HistoryPage-entry\">\r\n                <div className=\"History-page-entry-content\">\r\n                    <div className=\"HistoryPage-entry-delete-btn\" onClick={() => this.props.onDeleteCategory(text)}>&#215;</div>\r\n                    <div className=\"HistoryPage-entry-main\">\r\n                        {text}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEntry(entry) {\r\n        return (\r\n            <div key={entry.id} className=\"HistoryPage-entry\">\r\n                <div className=\"History-page-entry-content\">\r\n                    <div className=\"HistoryPage-entry-delete-btn\" onClick={() => this.props.onDeleteEntry(entry.id)}>&#215;</div>\r\n                    <div className=\"HistoryPage-entry-main\">\r\n                        <div>{entry.location}</div>\r\n                        <div><span className=\"income-indicator\">&#9650;</span>${entry.income}</div>\r\n                        <div><span className=\"expense-indicator\">&#9660;</span>${entry.expense}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"HistoryPage-entry-collapse\">\r\n                    {entry.description}\r\n                </div>\r\n            </div>   \r\n        );\r\n    }\r\n\r\n    renderSelectOption(options) {\r\n        if (options === null) {\r\n            return null;\r\n        }\r\n        return options.map((op) => {\r\n            return <option key={op + \"-history-view-option\"} value={op}>{op}</option>;\r\n        });\r\n    }\r\n\r\n    onChangeViewYear = (e) => {\r\n        const year = e.target.value;\r\n        this.props.onChangeViewYear(year);\r\n    }\r\n\r\n    onChangeViewMonth =(e) => {\r\n        const month = e.target.value;\r\n        for (const m of this.monthsAndDays) {\r\n            if (m.name === month) {\r\n                this.props.onChangeViewMonth(m.num);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    getCurrentYear() {\r\n        if (this.props.currentAnnualStatement !== null) {\r\n            return this.props.currentAnnualStatement.year;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getCurrentMonth() {\r\n        if (this.props.availableMonths !== null) {\r\n            let selectedMonth = this.props.availableMonths[0];\r\n            this.props.availableMonths.forEach(month => {\r\n                if (month === this.props.currentMonth) {\r\n                    selectedMonth = this.props.currentMonth;\r\n                    return;\r\n                }\r\n            });\r\n            return selectedMonth;\r\n        }\r\n        return \"\";\r\n    }\r\n    \r\n\r\n\r\n    numericMonthToNamed(months) {\r\n        if (months === null) {\r\n            return null;\r\n        }\r\n        const namedMonths = [];\r\n        months.forEach(m => {\r\n            namedMonths.push(this.monthsAndDays[m - 1].name);\r\n        });\r\n        return namedMonths;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"HistoryPage-body\">\r\n                <div className=\"HistoryPage-header-content\">\r\n                    <div className=\"HistoryPage-header-label\">History</div>\r\n                    <div className=\"HistoryPage-select-label\">Year</div>\r\n                    <select className=\"HistoryPage-header-select\" value={this.getCurrentYear()} \r\n                        onChange={(e) => this.onChangeViewYear(e)}>\r\n                        {this.renderSelectOption(this.props.availableYears)}\r\n                    </select>\r\n                    <div className=\"HistoryPage-select-label\">Month</div>\r\n                    <select className=\"HistoryPage-header-select\" value={this.monthsAndDays[this.props.currentMonth - 1].name}\r\n                         onChange={(e) => this.onChangeViewMonth(e)}>\r\n                        {this.renderSelectOption(this.numericMonthToNamed(this.props.availableMonths))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"HistoryPage-content\" data-simplebar data-simplebar-auto-hide=\"false\">\r\n                    <div className=\"HistoryPage-grid\">\r\n                            {this.renderGrid(this.props.currentAnnualStatement)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default HistoryPage;","\r\nclass MonthStatement {\r\n    constructor(id, month) {\r\n        this.id = id;\r\n        this.month = month;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.id = statement.id;\r\n        this.month = statement.month;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyEntires = statement.monthlyEntires;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyEntires.forEach(entry => {\r\n            this.totalIncome += +entry.income;\r\n            this.totalExpense += +entry.expense;\r\n        });\r\n    }\r\n\r\n    addEntry(entry) {\r\n        this.monthlyEntires.push(entry);\r\n        this.calculateTotal();\r\n    }\r\n\r\n    isStatementEmpty() {\r\n        return this.monthlyEntires.length === 0;\r\n    }\r\n\r\n    getCategoriesIncomeExpenseTotal() {\r\n        const totals = [];\r\n        this.monthlyEntires.forEach(entry => {\r\n            var added = false;\r\n            for (let i = 0; i < totals.length; i++) {\r\n                const t = totals[i];\r\n                if (t.category === entry.category) {\r\n                    t.income += +entry.income;\r\n                    t.expense += +entry.expense;\r\n                    totals[i] = t;\r\n                    added = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!added) {\r\n                totals.push({\r\n                    category: entry.category, \r\n                    income: +entry.income, \r\n                    expense: +entry.expense\r\n                });\r\n            }\r\n        });\r\n        return totals;\r\n    }\r\n\r\n    deleteEntry(entryId) {\r\n        this.monthlyEntires = this.monthlyEntires.filter((entry) => {\r\n            return entry.id !== entryId;\r\n        });\r\n        this.calculateTotal();\r\n    }\r\n\r\n    deleteEntryByCategory(categoryName) {\r\n        this.monthlyEntires = this.monthlyEntires.filter((entry) => {\r\n            return entry.category !== categoryName;\r\n        });\r\n        this.calculateTotal();\r\n    }\r\n}\r\n\r\nexport default MonthStatement;","import MonthStatement from \"./MonthStatement\";\r\n\r\nclass AnnualStatement {\r\n    constructor(year) {\r\n        this.year = year;\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = [];\r\n    }\r\n\r\n    copy(statement) {\r\n        this.year = statement.year;\r\n        this.totalIncome = statement.totalIncome;\r\n        this.totalExpense = statement.totalExpense;\r\n        this.monthlyStatements = this.initEmptyMonthStatement();\r\n        this.categories = statement.categories;\r\n        for (let i = 0; i < this.monthlyStatements.length; i++) {\r\n            this.monthlyStatements[i].copy(statement.monthlyStatements[i]);\r\n        }\r\n    }\r\n\r\n    initEmptyMonthStatement() {\r\n        let statements = new Array(12);\r\n        for (let i = 0; i < statements.length; i++) {\r\n            statements[i] = new MonthStatement(i, +i + 1);\r\n        }\r\n        return statements;\r\n    }\r\n\r\n    calculateTotal() {\r\n        this.totalIncome = 0;\r\n        this.totalExpense = 0;\r\n        this.monthlyStatements.forEach(statement => {\r\n            this.totalIncome += +statement.totalIncome;\r\n            this.totalExpense += +statement.totalExpense;\r\n        });\r\n    }\r\n\r\n    replaceMonthlyStatement(statement) {\r\n        this.monthlyStatements[statement.month - 1] = statement;\r\n        this.calculateTotal();\r\n    }\r\n\r\n    addEntryToMonthStatement(month, entry) {\r\n        if (this.monthlyStatements[month - 1] != null) {\r\n            this.monthlyStatements[month - 1].addEntry(entry);\r\n        }\r\n        this.calculateTotal();\r\n    }\r\n\r\n    addCategory(category) {\r\n        console.log(this.categories);\r\n        if (this.categories.length > 0 && this.categories.includes(category)) {\r\n            return false;\r\n        }\r\n        this.categories.push(category);\r\n        return true;\r\n    }\r\n\r\n    getMonthTotalIncome(month) {\r\n        return this.monthlyStatements[month - 1].totalIncome;\r\n    }\r\n    getMonthTotalExpense(month) {\r\n        return this.monthlyStatements[month - 1].totalExpense;\r\n    }\r\n    getMonthEntries(month) {\r\n        return this.monthlyStatements[month - 1].monthlyEntires;\r\n    }\r\n    getMonthStatement(month) {\r\n        return this.monthlyStatements[month - 1];\r\n    }\r\n\r\n    deleteEntry(entryId, month) {\r\n        const monthStatement = this.getMonthStatement(month);\r\n        monthStatement.deleteEntry(entryId);\r\n        this.replaceMonthlyStatement(monthStatement);\r\n        this.calculateTotal();\r\n    }\r\n\r\n    deleteCategory(categoryName) {\r\n        this.categories = this.categories.filter((cat) => {\r\n            return cat !== categoryName;\r\n        });\r\n        this.monthlyStatements.forEach(statement => {\r\n            statement.deleteEntryByCategory(categoryName);\r\n        });\r\n        this.calculateTotal();\r\n    }\r\n\r\n    getAllCategoryTotals() {\r\n        const categoriesTotalMap = new Map();\r\n        this.monthlyStatements.forEach(statement => {\r\n            const catSubTotalArray = statement.getCategoriesIncomeExpenseTotal();\r\n            catSubTotalArray.forEach(entry => {\r\n                if (categoriesTotalMap.has(entry.category)) {\r\n                    const oldTotal = categoriesTotalMap.get(entry.category);\r\n                    const newTotalIncome = entry.income + oldTotal.income;\r\n                    const newTotalExpense = entry.expense + oldTotal.expense;\r\n                    categoriesTotalMap.set(entry.category, {income: newTotalIncome, expense: newTotalExpense});\r\n                } else {\r\n                    categoriesTotalMap.set(entry.category, {income: entry.income, expense: entry.expense});\r\n                }\r\n            });\r\n        });\r\n        return Array.from(categoriesTotalMap, ([category, totals]) => ({category, totals}));\r\n    }\r\n}\r\n\r\nexport default AnnualStatement;","import React from \"react\";\r\nimport SummaryPage from \"./SummaryPage\";\r\nimport './Dashboard.css'\r\nimport AddPage from \"./AddPage\";\r\nimport HistoryPage from \"./HistoryPage\";\r\nimport AnnualStatement from \"./AnnualStatement\";\r\nimport 'simplebar'; \r\nimport 'simplebar/dist/simplebar.css';\r\nimport { GoogleLogin, GoogleLogout } from \"react-google-login\";\r\n\r\nclass Dashboard extends React.Component {\r\n\r\n    CLIENT_ID = '91993730445-4jjm5pf1kvja9m8r6b66uarvnqmdir1b.apps.googleusercontent.com';\r\n    editCount = 0;\r\n    saveIntervalId = setInterval(() => {\r\n        if (this.editCount > 0) {\r\n            if (this.editCount === 1) {\r\n                this.saveToDrive();\r\n                console.log(\"Saved to drive\");\r\n            }\r\n            --this.editCount;\r\n        }\r\n    }, 1000);\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            isSaving: false,\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        }\r\n    }\r\n    \r\n    incrementEditCount() {\r\n        if (this.editCount < 2) {\r\n            ++this.editCount;\r\n        }\r\n    }\r\n\r\n    getCurrentAnnualStatement() {\r\n        if (this.state.allAnnualStatements.length === 0) {\r\n            return null;\r\n        }\r\n        return this.state.allAnnualStatements[this.state.currentYearIndex];\r\n    }\r\n\r\n    setCurrentAnnualStatement(newStatement) {\r\n        let newAllAnnualStatement = this.state.allAnnualStatements;\r\n        newAllAnnualStatement[this.state.currentYearIndex] = newStatement;\r\n        this.setState({allAnnualStatements: newAllAnnualStatement});\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    addNewAnnualStatementWithEntry(entry) {\r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        const newAnnualStatement = new AnnualStatement(entry.date.year);\r\n        newAnnualStatement.addCategory(entry.category);\r\n        newAnnualStatement.addEntryToMonthStatement(entry.date.month, entry);\r\n        newAllAnnualStatements.push(newAnnualStatement);\r\n        const newCurrentYearIndex = newAllAnnualStatements.length - 1;\r\n        this.setState({allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: newCurrentYearIndex,\r\n            currentMonth: entry.date.month});\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    handleNewEntry = (entry) => {\r\n        if (this.getCurrentAnnualStatement() === null) {\r\n            this.addNewAnnualStatementWithEntry(entry);\r\n            return;\r\n        }\r\n\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        let annualStatementIndex = this.state.currentYearIndex;\r\n        if (entry.date.year !== newCurrentAnnualStatement.year) {\r\n            let yearDNE = true;\r\n            this.state.allAnnualStatements.forEach((statement, i) => {\r\n                if (statement.year === entry.date.year) {\r\n                    yearDNE = false;\r\n                    annualStatementIndex = i;\r\n                } \r\n            });\r\n            if (yearDNE) {\r\n                this.addNewAnnualStatementWithEntry(entry);\r\n                return;\r\n            } \r\n        } \r\n        const newAllAnnualStatements = this.state.allAnnualStatements;\r\n        newAllAnnualStatements[annualStatementIndex].addCategory(entry.category);\r\n        newAllAnnualStatements[annualStatementIndex].addEntryToMonthStatement(entry.date.month, entry);\r\n        this.setState({\r\n            allAnnualStatements: newAllAnnualStatements,\r\n            currentYearIndex: annualStatementIndex,\r\n            currentMonth: entry.date.month\r\n        });\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    handleNewCategory = (c) => {\r\n        const newCurrentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (newCurrentAnnualStatement.addCategory(c)) {\r\n            this.setCurrentAnnualStatement(newCurrentAnnualStatement);\r\n        }\r\n    }\r\n\r\n    handleDeleteEntry = (entryId) => {\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        currentAnnualStatement.deleteEntry(entryId, this.state.currentMonth);\r\n        this.setCurrentAnnualStatement(currentAnnualStatement);\r\n        this.incrementEditCount();\r\n    } \r\n\r\n    handleDeleteCategory = (categoryName) => {\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        currentAnnualStatement.deleteCategory(categoryName);\r\n        this.setCurrentAnnualStatement(currentAnnualStatement);\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    getAvailableYears() {\r\n        let years = [];\r\n        this.state.allAnnualStatements.forEach(statement => {\r\n            years.push(statement.year);\r\n        });\r\n        return years.sort();\r\n    }\r\n\r\n    getAvailableMonths() {\r\n        let month = [];\r\n        const currentAnnualStatement = this.getCurrentAnnualStatement();\r\n        if (currentAnnualStatement == null) {\r\n            return null;\r\n        }\r\n        currentAnnualStatement.monthlyStatements.forEach(monthStatement => {\r\n            if (!monthStatement.isStatementEmpty()) {\r\n                month.push(monthStatement.month);\r\n            }\r\n        });\r\n        return month;\r\n    }\r\n\r\n    handleChangeViewYear = (year) => {\r\n        const allAnnualStatements = this.state.allAnnualStatements;\r\n        for(let i = 0; i < allAnnualStatements.length; ++i) {\r\n            if (+allAnnualStatements[i].year === +year) {\r\n                let firstAvailableMonth = -1;\r\n                allAnnualStatements[i].monthlyStatements.forEach(monthStatement => {\r\n                    if (!monthStatement.isStatementEmpty()) {\r\n                        firstAvailableMonth = monthStatement.month;\r\n                    }\r\n                });\r\n\r\n                this.setState({currentYearIndex: i, currentMonth: firstAvailableMonth});\r\n                this.incrementEditCount();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChangeViewMonth = (month) => {\r\n        this.setState({currentMonth: month});\r\n        this.incrementEditCount();\r\n    }\r\n\r\n    successLoginGoogle = (response) => {\r\n        this.setState({\r\n            userEmail: response.profileObj.email,\r\n            userName: response.profileObj.name,\r\n            isSignedIn: true\r\n        });\r\n\r\n        fetch('/login', {\r\n            method: 'GET',\r\n            headers: {\r\n                accessToken: response.tokenObj.access_token\r\n            }\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                console.log(data.message);\r\n                this.getDataFromDrive();\r\n            });\r\n    }\r\n\r\n    failureLoginGoogle = (response) => {\r\n        console.log(\"failed to login to google\");\r\n        console.log(response);\r\n    }\r\n\r\n    successLogoutGoogle = () => {\r\n        this.setState({\r\n            isSignedIn: false,\r\n            userName: '',\r\n            userEmail: '',\r\n            currentMonth: 1,\r\n            currentYearIndex: 0,\r\n            allAnnualStatements: [],\r\n        });\r\n        console.log(\"successfully logged out of google\");\r\n    }\r\n\r\n    saveToDrive = () => {\r\n        if (!this.state.isSignedIn) {\r\n            return;\r\n        }\r\n        this.setState({isSaving: true});\r\n        fetch(`/save`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n            // add icon to show this in UI \r\n            console.log(data.message);\r\n            console.log(`Save Status: ${data.status ? \"Success\" : \"Failure\"}`);\r\n            this.setState({isSaving: false});\r\n        });\r\n    }\r\n\r\n    getDataFromDrive = () => {\r\n        fetch(`/get`)\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                // save file not found in GDrive\r\n                if (data.userData === null) {\r\n                    // Make a new save file \r\n                    this.saveToDrive();\r\n                    return;\r\n                }\r\n\r\n                const allAnnualStatements = [];\r\n                data.userData.allAnnualStatements.forEach(statement => {\r\n                    const newStatement = new AnnualStatement(statement.year);\r\n                    newStatement.copy(statement);\r\n                    allAnnualStatements.push(newStatement);\r\n                });\r\n\r\n                this.setState({\r\n                    currentMonth: data.userData.currentMonth,\r\n                    currentYearIndex: data.userData.currentYearIndex,\r\n                    allAnnualStatements: allAnnualStatements\r\n                });\r\n                console.log(data.message); \r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Dashboard-body\">\r\n                <div className=\"Dashboard-content\">\r\n                    <div className=\"Dashbaord-content-left\" >\r\n                        <div className=\"Dashboard-header\">\r\n                            <div className=\"Dashboard-header-label\">MFlow</div>\r\n                        </div>\r\n                        <div className=\"Dashboard-content-left-scrollabe\" data-simplebar>\r\n                            <div className=\"Dashboard-account-block\">\r\n                                <div className={`Dashboard-user-info ${!this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <div className=\"Dashboard-user-info-texts\">\r\n                                        <div>{this.state.userName}</div>\r\n                                        <div>{this.state.userEmail}</div>\r\n                                    </div>\r\n                                    <div className={`Dashboard-save-status-text ${!this.state.isSaving ?  \"Dashboard-disabled\" : \"\"}`}>\r\n                                        Saving to Google Drive...\r\n                                        </div>\r\n                                    <GoogleLogout \r\n                                        clientId={this.CLIENT_ID}\r\n                                        buttonText=\"Log out\"\r\n                                        onLogoutSuccess={this.successLogoutGoogle}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log out\r\n                                                </button>\r\n                                          )}/>\r\n                                </div>\r\n                                <div className={`Dashboard-google-login-wrapper ${this.state.isSignedIn ? \"Dashboard-disabled\" : \"\"}`}>\r\n                                    <GoogleLogin \r\n                                        clientId={this.CLIENT_ID}\r\n                                        onSuccess={this.successLoginGoogle}\r\n                                        onFailure={this.failureLoginGoogle}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                        scope={'https://www.googleapis.com/auth/drive.appdata'}\r\n                                        isSignedIn={true}\r\n                                        render={renderProps => (\r\n                                            <button onClick={renderProps.onClick} \r\n                                            disabled={renderProps.disabled} \r\n                                            className=\"Dashboard-google-button\">\r\n                                                Log in with Google to save your data!\r\n                                            </button>\r\n                                          )}/>\r\n                                </div>\r\n                            </div>\r\n                            <SummaryPage currentAnnualStatement={this.getCurrentAnnualStatement()}\r\n                                        currentMonth={this.state.currentMonth} />\r\n                            <br/>\r\n                            <AddPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    onAddEntry={this.handleNewEntry}\r\n                                    onAddCategory={this.handleNewCategory}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"Dashboard-content-right\">\r\n                       <HistoryPage currentAnnualStatement={this.getCurrentAnnualStatement()} \r\n                                    currentMonth={this.state.currentMonth}\r\n                                    onChangeViewYear={this.handleChangeViewYear}\r\n                                    onChangeViewMonth={this.handleChangeViewMonth}\r\n                                    availableYears={this.getAvailableYears()}\r\n                                    availableMonths={this.getAvailableMonths()}\r\n                                    onDeleteEntry={this.handleDeleteEntry}\r\n                                    onDeleteCategory={this.handleDeleteCategory}/>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Dashboard;","import './App.css';\r\nimport Dashboard from './Dashboard.js';\r\nimport React from 'react';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-body\">\r\n        <Dashboard />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}